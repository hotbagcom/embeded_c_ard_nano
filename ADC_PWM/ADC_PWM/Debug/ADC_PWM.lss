
ADC_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000502  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000502  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000502  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000038  00000000  00000000  00000531  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000569  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b04  00000000  00000000  000005c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c7  00000000  00000000  000010c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000310  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017a  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000460  00000460  000004f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.adc_pin_enable 0000001a  000003f6  000003f6  0000048a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.adc_pin_disable 0000001c  000003da  000003da  0000046e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.adc_pin_select 00000012  0000043c  0000043c  000004d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADC_Init 00000012  0000044e  0000044e  000004e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.ADC_Read 0000002a  00000392  00000392  00000426  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.adc_convrt_a_1 0000011a  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.adc_convrt_b_1 0000011a  000001dc  000001dc  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    00000058  000002f6  000002f6  0000038a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .bss.bverall  00000004  00800104  00800104  00000502  2**0
                  ALLOC
 24 .bss.averall  00000004  00800108  00800108  00000502  2**0
                  ALLOC
 25 .text.libgcc.div 00000044  0000034e  0000034e  000003e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.libgcc.mul 00000016  00000410  00000410  000004a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.libgcc.mul 0000001e  000003bc  000003bc  00000450  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_fini 00000002  00000468  00000468  000004fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  0000046a  0000046a  000004fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  0000046c  0000046c  00000500  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  00000426  00000426  000004ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  00000464  00000464  000004f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
   8:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
   c:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  10:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  14:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  18:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  1c:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  20:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  24:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  28:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  2c:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  30:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  34:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  38:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  3c:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  40:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  44:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  48:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  4c:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  50:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  54:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  58:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  5c:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  60:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>
  64:	0c 94 30 02 	jmp	0x460	; 0x460 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0c       	add	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <main>
  ba:	0c 94 13 02 	jmp	0x426	; 0x426 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000460 <__bad_interrupt>:
 460:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.adc_pin_enable:

000003f6 <adc_pin_enable>:
uint16_t b_1;
volatile uint32_t averall = 0;
volatile uint32_t bverall = 0;

void adc_pin_enable(uint8_t pin){
	DIDR0 |= 1 << pin;
 3f6:	ee e7       	ldi	r30, 0x7E	; 126
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	90 81       	ld	r25, Z
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	22 0f       	add	r18, r18
 404:	33 1f       	adc	r19, r19
 406:	8a 95       	dec	r24
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	29 2b       	or	r18, r25
 40c:	20 83       	st	Z, r18
 40e:	08 95       	ret

Disassembly of section .text.adc_pin_disable:

000003da <adc_pin_disable>:
}

void adc_pin_disable(uint8_t pin){
	DIDR0 &= ~(1 << pin);
 3da:	ee e7       	ldi	r30, 0x7E	; 126
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	90 81       	ld	r25, Z
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <adc_pin_disable+0x10>
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	8a 95       	dec	r24
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <adc_pin_disable+0xc>
 3ee:	20 95       	com	r18
 3f0:	29 23       	and	r18, r25
 3f2:	20 83       	st	Z, r18
 3f4:	08 95       	ret

Disassembly of section .text.adc_pin_select:

0000043c <adc_pin_select>:
}

void adc_pin_select(uint8_t souce){
	ADMUX &= 0xF0;
 43c:	ec e7       	ldi	r30, 0x7C	; 124
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	90 81       	ld	r25, Z
 442:	90 7f       	andi	r25, 0xF0	; 240
 444:	90 83       	st	Z, r25
	ADMUX |= souce;
 446:	90 81       	ld	r25, Z
 448:	89 2b       	or	r24, r25
 44a:	80 83       	st	Z, r24
 44c:	08 95       	ret

Disassembly of section .text.ADC_Init:

0000044e <ADC_Init>:
}
void ADC_Init()										/* ADC Initialization function */
{
	
	ADCSRA |= 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 ;  // AVCC with external capacitor at AREF pin,  64 prescaler
 44e:	ea e7       	ldi	r30, 0x7A	; 122
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	86 68       	ori	r24, 0x86	; 134
 456:	80 83       	st	Z, r24
	ADMUX = (1 << REFS0);
 458:	80 e4       	ldi	r24, 0x40	; 64
 45a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 45e:	08 95       	ret

Disassembly of section .text.ADC_Read:

00000392 <ADC_Read>:
}

uint16_t ADC_Read(char channel)							/* ADC Read function */
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x07);		/* set input channel to read */
 392:	ec e7       	ldi	r30, 0x7C	; 124
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	90 81       	ld	r25, Z
 398:	90 7f       	andi	r25, 0xF0	; 240
 39a:	87 70       	andi	r24, 0x07	; 7
 39c:	89 2b       	or	r24, r25
 39e:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							/* Start ADC conversion */
 3a0:	ea e7       	ldi	r30, 0x7A	; 122
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	80 64       	ori	r24, 0x40	; 64
 3a8:	80 83       	st	Z, r24
	while(ADCSRA & (0x1 <<ADSC));				//// Wait until conversion is  completed
 3aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 3ae:	86 fd       	sbrc	r24, 6
 3b0:	fc cf       	rjmp	.-8      	; 0x3aa <ADC_Read+0x18>
	return ADCW;									/* Return ADC word */
 3b2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 3b6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
}
 3ba:	08 95       	ret

Disassembly of section .text.adc_convrt_a_1:

000000c2 <adc_convrt_a_1>:




void adc_convrt_a_1 (uint8_t a){
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	c8 2f       	mov	r28, r24
	
	adc_pin_enable(a);
  d2:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <adc_pin_enable>
	adc_pin_select(a);
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 1e 02 	call	0x43c	; 0x43c <adc_pin_select>
		averall = (70*averall + 30*((500000*ADC_Read(a))>>10));
  dc:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <averall>
  e0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <averall+0x1>
  e4:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <averall+0x2>
  e8:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <averall+0x3>
  ec:	a6 e4       	ldi	r26, 0x46	; 70
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	0e 94 08 02 	call	0x410	; 0x410 <__muluhisi3>
  f4:	6b 01       	movw	r12, r22
  f6:	7c 01       	movw	r14, r24
  f8:	8c 2f       	mov	r24, r28
  fa:	0e 94 c9 01 	call	0x392	; 0x392 <ADC_Read>
  fe:	dc 01       	movw	r26, r24
 100:	20 e2       	ldi	r18, 0x20	; 32
 102:	31 ea       	ldi	r19, 0xA1	; 161
 104:	47 e0       	ldi	r20, 0x07	; 7
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	0e 94 08 02 	call	0x410	; 0x410 <__muluhisi3>
 10c:	dc 01       	movw	r26, r24
 10e:	cb 01       	movw	r24, r22
 110:	07 2e       	mov	r0, r23
 112:	7a e0       	ldi	r23, 0x0A	; 10
 114:	b5 95       	asr	r27
 116:	a7 95       	ror	r26
 118:	97 95       	ror	r25
 11a:	87 95       	ror	r24
 11c:	7a 95       	dec	r23
 11e:	d1 f7       	brne	.-12     	; 0x114 <adc_convrt_a_1+0x52>
 120:	70 2d       	mov	r23, r0
 122:	8c 01       	movw	r16, r24
 124:	9d 01       	movw	r18, r26
 126:	00 0f       	add	r16, r16
 128:	11 1f       	adc	r17, r17
 12a:	22 1f       	adc	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	80 0f       	add	r24, r16
 130:	91 1f       	adc	r25, r17
 132:	a2 1f       	adc	r26, r18
 134:	b3 1f       	adc	r27, r19
 136:	8c 01       	movw	r16, r24
 138:	9d 01       	movw	r18, r26
 13a:	00 0f       	add	r16, r16
 13c:	11 1f       	adc	r17, r17
 13e:	22 1f       	adc	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	00 0f       	add	r16, r16
 144:	11 1f       	adc	r17, r17
 146:	22 1f       	adc	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	80 0f       	add	r24, r16
 14c:	91 1f       	adc	r25, r17
 14e:	a2 1f       	adc	r26, r18
 150:	b3 1f       	adc	r27, r19
 152:	8c 01       	movw	r16, r24
 154:	9d 01       	movw	r18, r26
 156:	00 0f       	add	r16, r16
 158:	11 1f       	adc	r17, r17
 15a:	22 1f       	adc	r18, r18
 15c:	33 1f       	adc	r19, r19
 15e:	c0 0e       	add	r12, r16
 160:	d1 1e       	adc	r13, r17
 162:	e2 1e       	adc	r14, r18
 164:	f3 1e       	adc	r15, r19
 166:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <averall>
 16a:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <averall+0x1>
 16e:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <averall+0x2>
 172:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <averall+0x3>
		averall/=100;
 176:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <averall>
 17a:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <averall+0x1>
 17e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <averall+0x2>
 182:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <averall+0x3>
 186:	24 e6       	ldi	r18, 0x64	; 100
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	0e 94 a7 01 	call	0x34e	; 0x34e <__udivmodsi4>
 192:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <averall>
 196:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <averall+0x1>
 19a:	40 93 0a 01 	sts	0x010A, r20	; 0x80010a <averall+0x2>
 19e:	50 93 0b 01 	sts	0x010B, r21	; 0x80010b <averall+0x3>
	a_1 = averall/1000;
 1a2:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <averall>
 1a6:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <averall+0x1>
 1aa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <averall+0x2>
 1ae:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <averall+0x3>
 1b2:	28 ee       	ldi	r18, 0xE8	; 232
 1b4:	33 e0       	ldi	r19, 0x03	; 3
 1b6:	40 e0       	ldi	r20, 0x00	; 0
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	0e 94 a7 01 	call	0x34e	; 0x34e <__udivmodsi4>
 1be:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <a_1+0x1>
 1c2:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <a_1>
	adc_pin_disable(a);
 1c6:	8c 2f       	mov	r24, r28
 1c8:	0e 94 ed 01 	call	0x3da	; 0x3da <adc_pin_disable>
}
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	08 95       	ret

Disassembly of section .text.adc_convrt_b_1:

000001dc <adc_convrt_b_1>:

void adc_convrt_b_1(uint8_t b){
 1dc:	cf 92       	push	r12
 1de:	df 92       	push	r13
 1e0:	ef 92       	push	r14
 1e2:	ff 92       	push	r15
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	cf 93       	push	r28
 1ea:	c8 2f       	mov	r28, r24
	
	adc_pin_enable(b);
 1ec:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <adc_pin_enable>
	adc_pin_select(b);
 1f0:	8c 2f       	mov	r24, r28
 1f2:	0e 94 1e 02 	call	0x43c	; 0x43c <adc_pin_select>
		bverall  = (70*bverall + 30*((500000*ADC_Read(b))>>10));
 1f6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <_end>
 1fa:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <_end+0x1>
 1fe:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_end+0x2>
 202:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_end+0x3>
 206:	a6 e4       	ldi	r26, 0x46	; 70
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	0e 94 08 02 	call	0x410	; 0x410 <__muluhisi3>
 20e:	6b 01       	movw	r12, r22
 210:	7c 01       	movw	r14, r24
 212:	8c 2f       	mov	r24, r28
 214:	0e 94 c9 01 	call	0x392	; 0x392 <ADC_Read>
 218:	dc 01       	movw	r26, r24
 21a:	20 e2       	ldi	r18, 0x20	; 32
 21c:	31 ea       	ldi	r19, 0xA1	; 161
 21e:	47 e0       	ldi	r20, 0x07	; 7
 220:	50 e0       	ldi	r21, 0x00	; 0
 222:	0e 94 08 02 	call	0x410	; 0x410 <__muluhisi3>
 226:	dc 01       	movw	r26, r24
 228:	cb 01       	movw	r24, r22
 22a:	07 2e       	mov	r0, r23
 22c:	7a e0       	ldi	r23, 0x0A	; 10
 22e:	b5 95       	asr	r27
 230:	a7 95       	ror	r26
 232:	97 95       	ror	r25
 234:	87 95       	ror	r24
 236:	7a 95       	dec	r23
 238:	d1 f7       	brne	.-12     	; 0x22e <adc_convrt_b_1+0x52>
 23a:	70 2d       	mov	r23, r0
 23c:	8c 01       	movw	r16, r24
 23e:	9d 01       	movw	r18, r26
 240:	00 0f       	add	r16, r16
 242:	11 1f       	adc	r17, r17
 244:	22 1f       	adc	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	80 0f       	add	r24, r16
 24a:	91 1f       	adc	r25, r17
 24c:	a2 1f       	adc	r26, r18
 24e:	b3 1f       	adc	r27, r19
 250:	8c 01       	movw	r16, r24
 252:	9d 01       	movw	r18, r26
 254:	00 0f       	add	r16, r16
 256:	11 1f       	adc	r17, r17
 258:	22 1f       	adc	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	00 0f       	add	r16, r16
 25e:	11 1f       	adc	r17, r17
 260:	22 1f       	adc	r18, r18
 262:	33 1f       	adc	r19, r19
 264:	80 0f       	add	r24, r16
 266:	91 1f       	adc	r25, r17
 268:	a2 1f       	adc	r26, r18
 26a:	b3 1f       	adc	r27, r19
 26c:	8c 01       	movw	r16, r24
 26e:	9d 01       	movw	r18, r26
 270:	00 0f       	add	r16, r16
 272:	11 1f       	adc	r17, r17
 274:	22 1f       	adc	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	c0 0e       	add	r12, r16
 27a:	d1 1e       	adc	r13, r17
 27c:	e2 1e       	adc	r14, r18
 27e:	f3 1e       	adc	r15, r19
 280:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <_end>
 284:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <_end+0x1>
 288:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_end+0x2>
 28c:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_end+0x3>
		bverall/=100;
 290:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_end>
 294:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_end+0x1>
 298:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_end+0x2>
 29c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_end+0x3>
 2a0:	24 e6       	ldi	r18, 0x64	; 100
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	0e 94 a7 01 	call	0x34e	; 0x34e <__udivmodsi4>
 2ac:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <_end>
 2b0:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <_end+0x1>
 2b4:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <_end+0x2>
 2b8:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <_end+0x3>
	b_1 =bverall/1000;
 2bc:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_end>
 2c0:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_end+0x1>
 2c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_end+0x2>
 2c8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_end+0x3>
 2cc:	28 ee       	ldi	r18, 0xE8	; 232
 2ce:	33 e0       	ldi	r19, 0x03	; 3
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	0e 94 a7 01 	call	0x34e	; 0x34e <__udivmodsi4>
 2d8:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2dc:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	adc_pin_disable(b);
 2e0:	8c 2f       	mov	r24, r28
 2e2:	0e 94 ed 01 	call	0x3da	; 0x3da <adc_pin_disable>

}
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	df 90       	pop	r13
 2f2:	cf 90       	pop	r12
 2f4:	08 95       	ret

Disassembly of section .text.main:

000002f6 <main>:



int main(void)
{
	ADC_Init();										/* Initialize ADC */
 2f6:	0e 94 27 02 	call	0x44e	; 0x44e <ADC_Init>
	DDRB |= 1<< PINB1 | 1<<PINB2 ;					/* Make OC1A OC1B pin as output */
 2fa:	84 b1       	in	r24, 0x04	; 4
 2fc:	86 60       	ori	r24, 0x06	; 6
 2fe:	84 b9       	out	0x04, r24	; 4
	
	ICR1 = 4999;									/* Set TOP count for timer1 in ICR1 register */
 300:	87 e8       	ldi	r24, 0x87	; 135
 302:	93 e1       	ldi	r25, 0x13	; 19
 304:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 308:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);				/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/prescaler64 */
 30c:	82 ea       	ldi	r24, 0xA2	; 162
 30e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
 312:	8b e1       	ldi	r24, 0x1B	; 27
 314:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>


	
	while(1)
	{
		adc_convrt_a_1(4);
 318:	84 e0       	ldi	r24, 0x04	; 4
 31a:	0e 94 61 00 	call	0xc2	; 0xc2 <__data_load_end>
		
		adc_convrt_b_1(5);
 31e:	85 e0       	ldi	r24, 0x05	; 5
 320:	0e 94 ee 00 	call	0x1dc	; 0x1dc <adc_convrt_b_1>
		
		
		OCR1A =a_1 +125;
 324:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <a_1>
 328:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <a_1+0x1>
 32c:	83 58       	subi	r24, 0x83	; 131
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 334:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B =b_1 +125;
 338:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 33c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 340:	83 58       	subi	r24, 0x83	; 131
 342:	9f 4f       	sbci	r25, 0xFF	; 255
 344:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 348:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 34c:	e5 cf       	rjmp	.-54     	; 0x318 <main+0x22>

Disassembly of section .text.libgcc.div:

0000034e <__udivmodsi4>:
 34e:	a1 e2       	ldi	r26, 0x21	; 33
 350:	1a 2e       	mov	r1, r26
 352:	aa 1b       	sub	r26, r26
 354:	bb 1b       	sub	r27, r27
 356:	fd 01       	movw	r30, r26
 358:	0d c0       	rjmp	.+26     	; 0x374 <__udivmodsi4_ep>

0000035a <__udivmodsi4_loop>:
 35a:	aa 1f       	adc	r26, r26
 35c:	bb 1f       	adc	r27, r27
 35e:	ee 1f       	adc	r30, r30
 360:	ff 1f       	adc	r31, r31
 362:	a2 17       	cp	r26, r18
 364:	b3 07       	cpc	r27, r19
 366:	e4 07       	cpc	r30, r20
 368:	f5 07       	cpc	r31, r21
 36a:	20 f0       	brcs	.+8      	; 0x374 <__udivmodsi4_ep>
 36c:	a2 1b       	sub	r26, r18
 36e:	b3 0b       	sbc	r27, r19
 370:	e4 0b       	sbc	r30, r20
 372:	f5 0b       	sbc	r31, r21

00000374 <__udivmodsi4_ep>:
 374:	66 1f       	adc	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	88 1f       	adc	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	1a 94       	dec	r1
 37e:	69 f7       	brne	.-38     	; 0x35a <__udivmodsi4_loop>
 380:	60 95       	com	r22
 382:	70 95       	com	r23
 384:	80 95       	com	r24
 386:	90 95       	com	r25
 388:	9b 01       	movw	r18, r22
 38a:	ac 01       	movw	r20, r24
 38c:	bd 01       	movw	r22, r26
 38e:	cf 01       	movw	r24, r30
 390:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000410 <__muluhisi3>:
 410:	0e 94 de 01 	call	0x3bc	; 0x3bc <__umulhisi3>
 414:	a5 9f       	mul	r26, r21
 416:	90 0d       	add	r25, r0
 418:	b4 9f       	mul	r27, r20
 41a:	90 0d       	add	r25, r0
 41c:	a4 9f       	mul	r26, r20
 41e:	80 0d       	add	r24, r0
 420:	91 1d       	adc	r25, r1
 422:	11 24       	eor	r1, r1
 424:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000003bc <__umulhisi3>:
 3bc:	a2 9f       	mul	r26, r18
 3be:	b0 01       	movw	r22, r0
 3c0:	b3 9f       	mul	r27, r19
 3c2:	c0 01       	movw	r24, r0
 3c4:	a3 9f       	mul	r26, r19
 3c6:	70 0d       	add	r23, r0
 3c8:	81 1d       	adc	r24, r1
 3ca:	11 24       	eor	r1, r1
 3cc:	91 1d       	adc	r25, r1
 3ce:	b2 9f       	mul	r27, r18
 3d0:	70 0d       	add	r23, r0
 3d2:	81 1d       	adc	r24, r1
 3d4:	11 24       	eor	r1, r1
 3d6:	91 1d       	adc	r25, r1
 3d8:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000468 <_fini>:
 468:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000046a <__funcs_on_exit>:
 46a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000046c <__simulator_exit>:
 46c:	08 95       	ret

Disassembly of section .text.exit:

00000426 <exit>:
 426:	ec 01       	movw	r28, r24
 428:	0e 94 35 02 	call	0x46a	; 0x46a <__funcs_on_exit>
 42c:	0e 94 34 02 	call	0x468	; 0x468 <_fini>
 430:	ce 01       	movw	r24, r28
 432:	0e 94 36 02 	call	0x46c	; 0x46c <__simulator_exit>
 436:	ce 01       	movw	r24, r28
 438:	0e 94 32 02 	call	0x464	; 0x464 <_Exit>

Disassembly of section .text._Exit:

00000464 <_Exit>:
 464:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
