
ADC_PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004b4  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000004b4  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000038  00000000  00000000  000004e3  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000051b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ad2  00000000  00000000  00000573  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c7  00000000  00000000  00001045  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000310  00000000  00000000  0000170c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ee  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000412  00000412  000004a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.adc_pin_enable 0000001a  000003a8  000003a8  0000043c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.adc_pin_disable 0000001c  0000038c  0000038c  00000420  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.adc_pin_select 00000012  000003ee  000003ee  00000482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.ADC_Init 00000012  00000400  00000400  00000494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.ADC_Read 0000002a  00000344  00000344  000003d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.adc_convrt_a_1 000000d4  000001d8  000001d8  0000026c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.adc_convrt_b_1 00000116  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    00000054  000002ac  000002ac  00000340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .bss.bverall  00000004  00800104  00800104  000004b4  2**0
                  ALLOC
 24 .bss.averall  00000004  00800108  00800108  000004b4  2**0
                  ALLOC
 25 .text.libgcc.div 00000044  00000300  00000300  00000394  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.libgcc.mul 00000016  000003c2  000003c2  00000456  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.libgcc.mul 0000001e  0000036e  0000036e  00000402  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_fini 00000002  0000041a  0000041a  000004ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  0000041c  0000041c  000004b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  0000041e  0000041e  000004b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  000003d8  000003d8  0000046c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  00000416  00000416  000004aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
   8:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
   c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  10:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  14:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  18:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  1c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  20:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  24:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  28:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  2c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  30:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  34:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  38:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  3c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  40:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  44:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  48:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  4c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  50:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  54:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  58:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  5c:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  60:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>
  64:	0c 94 09 02 	jmp	0x412	; 0x412 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0c       	add	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  ba:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000412 <__bad_interrupt>:
 412:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.adc_pin_enable:

000003a8 <adc_pin_enable>:
uint16_t b_1;
volatile uint32_t averall = 0;
volatile uint32_t bverall = 0;

void adc_pin_enable(uint8_t pin){
	DIDR0 |= 1 << pin;
 3a8:	ee e7       	ldi	r30, 0x7E	; 126
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	90 81       	ld	r25, Z
 3ae:	21 e0       	ldi	r18, 0x01	; 1
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <adc_pin_enable+0x10>
 3b4:	22 0f       	add	r18, r18
 3b6:	33 1f       	adc	r19, r19
 3b8:	8a 95       	dec	r24
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <adc_pin_enable+0xc>
 3bc:	29 2b       	or	r18, r25
 3be:	20 83       	st	Z, r18
 3c0:	08 95       	ret

Disassembly of section .text.adc_pin_disable:

0000038c <adc_pin_disable>:
}

void adc_pin_disable(uint8_t pin){
	DIDR0 &= ~(1 << pin);
 38c:	ee e7       	ldi	r30, 0x7E	; 126
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	90 81       	ld	r25, Z
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <adc_pin_disable+0x10>
 398:	22 0f       	add	r18, r18
 39a:	33 1f       	adc	r19, r19
 39c:	8a 95       	dec	r24
 39e:	e2 f7       	brpl	.-8      	; 0x398 <adc_pin_disable+0xc>
 3a0:	20 95       	com	r18
 3a2:	29 23       	and	r18, r25
 3a4:	20 83       	st	Z, r18
 3a6:	08 95       	ret

Disassembly of section .text.adc_pin_select:

000003ee <adc_pin_select>:
}

void adc_pin_select(uint8_t souce){
	ADMUX &= 0xF0;
 3ee:	ec e7       	ldi	r30, 0x7C	; 124
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	90 81       	ld	r25, Z
 3f4:	90 7f       	andi	r25, 0xF0	; 240
 3f6:	90 83       	st	Z, r25
	ADMUX |= souce;
 3f8:	90 81       	ld	r25, Z
 3fa:	89 2b       	or	r24, r25
 3fc:	80 83       	st	Z, r24
 3fe:	08 95       	ret

Disassembly of section .text.ADC_Init:

00000400 <ADC_Init>:
}
void ADC_Init()										/* ADC Initialization function */
{
	
	ADCSRA |= 1<<ADEN | 1<<ADPS2 | 1<<ADPS1 ;  // AVCC with external capacitor at AREF pin,  64 prescaler
 400:	ea e7       	ldi	r30, 0x7A	; 122
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	86 68       	ori	r24, 0x86	; 134
 408:	80 83       	st	Z, r24
	ADMUX = (1 << REFS0);
 40a:	80 e4       	ldi	r24, 0x40	; 64
 40c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 410:	08 95       	ret

Disassembly of section .text.ADC_Read:

00000344 <ADC_Read>:
}

uint16_t ADC_Read(char channel)							/* ADC Read function */
{
	ADMUX = (ADMUX & 0xF0) | (channel & 0x07);		/* set input channel to read */
 344:	ec e7       	ldi	r30, 0x7C	; 124
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	90 81       	ld	r25, Z
 34a:	90 7f       	andi	r25, 0xF0	; 240
 34c:	87 70       	andi	r24, 0x07	; 7
 34e:	89 2b       	or	r24, r25
 350:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							/* Start ADC conversion */
 352:	ea e7       	ldi	r30, 0x7A	; 122
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	80 64       	ori	r24, 0x40	; 64
 35a:	80 83       	st	Z, r24
	while(ADCSRA & (0x1 <<ADSC));				//// Wait until conversion is  completed
 35c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 360:	86 fd       	sbrc	r24, 6
 362:	fc cf       	rjmp	.-8      	; 0x35c <ADC_Read+0x18>
	return ADCW;									/* Return ADC word */
 364:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 368:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	
}
 36c:	08 95       	ret

Disassembly of section .text.adc_convrt_a_1:

000001d8 <adc_convrt_a_1>:




void adc_convrt_a_1(void){
 1d8:	cf 92       	push	r12
 1da:	df 92       	push	r13
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
	
	adc_pin_enable(0);
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <adc_pin_enable>
	adc_pin_select(0);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 f7 01 	call	0x3ee	; 0x3ee <adc_pin_select>
		
		averall = (14*averall*(2^10) +  (((2^10)*(500*ADC_Read(0)))>>10));  ///875:125
 1ec:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <averall>
 1f0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <averall+0x1>
 1f4:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <averall+0x2>
 1f8:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <averall+0x3>
 1fc:	a0 e7       	ldi	r26, 0x70	; 112
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__muluhisi3>
 204:	6b 01       	movw	r12, r22
 206:	7c 01       	movw	r14, r24
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 a2 01 	call	0x344	; 0x344 <ADC_Read>
 20e:	20 ea       	ldi	r18, 0xA0	; 160
 210:	3f e0       	ldi	r19, 0x0F	; 15
 212:	ac 01       	movw	r20, r24
 214:	42 9f       	mul	r20, r18
 216:	c0 01       	movw	r24, r0
 218:	43 9f       	mul	r20, r19
 21a:	90 0d       	add	r25, r0
 21c:	52 9f       	mul	r21, r18
 21e:	90 0d       	add	r25, r0
 220:	11 24       	eor	r1, r1
 222:	89 2f       	mov	r24, r25
 224:	99 27       	eor	r25, r25
 226:	86 95       	lsr	r24
 228:	86 95       	lsr	r24
 22a:	c8 0e       	add	r12, r24
 22c:	d9 1e       	adc	r13, r25
 22e:	e1 1c       	adc	r14, r1
 230:	f1 1c       	adc	r15, r1
 232:	c0 92 08 01 	sts	0x0108, r12	; 0x800108 <averall>
 236:	d0 92 09 01 	sts	0x0109, r13	; 0x800109 <averall+0x1>
 23a:	e0 92 0a 01 	sts	0x010A, r14	; 0x80010a <averall+0x2>
 23e:	f0 92 0b 01 	sts	0x010B, r15	; 0x80010b <averall+0x3>
		averall = averall>>4;
 242:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <averall>
 246:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <averall+0x1>
 24a:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <averall+0x2>
 24e:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <averall+0x3>
 252:	68 94       	set
 254:	13 f8       	bld	r1, 3
 256:	b6 95       	lsr	r27
 258:	a7 95       	ror	r26
 25a:	97 95       	ror	r25
 25c:	87 95       	ror	r24
 25e:	16 94       	lsr	r1
 260:	d1 f7       	brne	.-12     	; 0x256 <adc_convrt_a_1+0x7e>
 262:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <averall>
 266:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <averall+0x1>
 26a:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <averall+0x2>
 26e:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <averall+0x3>
	a_1 = averall>>10;
 272:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <averall>
 276:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <averall+0x1>
 27a:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <averall+0x2>
 27e:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <averall+0x3>
 282:	07 2e       	mov	r0, r23
 284:	7a e0       	ldi	r23, 0x0A	; 10
 286:	b6 95       	lsr	r27
 288:	a7 95       	ror	r26
 28a:	97 95       	ror	r25
 28c:	87 95       	ror	r24
 28e:	7a 95       	dec	r23
 290:	d1 f7       	brne	.-12     	; 0x286 <adc_convrt_a_1+0xae>
 292:	70 2d       	mov	r23, r0
 294:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <a_1+0x1>
 298:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <a_1>
	adc_pin_disable(0);
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 c6 01 	call	0x38c	; 0x38c <adc_pin_disable>
}
 2a2:	ff 90       	pop	r15
 2a4:	ef 90       	pop	r14
 2a6:	df 90       	pop	r13
 2a8:	cf 90       	pop	r12
 2aa:	08 95       	ret

Disassembly of section .text.adc_convrt_b_1:

000000c2 <adc_convrt_b_1>:

void adc_convrt_b_1(void){
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
	
	adc_pin_enable(1);
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <adc_pin_enable>
	adc_pin_select(1);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <adc_pin_select>
		bverall  = (70*bverall + 30*((500000*ADC_Read(1))>>10));
  da:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <_end>
  de:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <_end+0x1>
  e2:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <_end+0x2>
  e6:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <_end+0x3>
  ea:	a6 e4       	ldi	r26, 0x46	; 70
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__muluhisi3>
  f2:	6b 01       	movw	r12, r22
  f4:	7c 01       	movw	r14, r24
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 a2 01 	call	0x344	; 0x344 <ADC_Read>
  fc:	dc 01       	movw	r26, r24
  fe:	20 e2       	ldi	r18, 0x20	; 32
 100:	31 ea       	ldi	r19, 0xA1	; 161
 102:	47 e0       	ldi	r20, 0x07	; 7
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__muluhisi3>
 10a:	dc 01       	movw	r26, r24
 10c:	cb 01       	movw	r24, r22
 10e:	07 2e       	mov	r0, r23
 110:	7a e0       	ldi	r23, 0x0A	; 10
 112:	b5 95       	asr	r27
 114:	a7 95       	ror	r26
 116:	97 95       	ror	r25
 118:	87 95       	ror	r24
 11a:	7a 95       	dec	r23
 11c:	d1 f7       	brne	.-12     	; 0x112 <adc_convrt_b_1+0x50>
 11e:	70 2d       	mov	r23, r0
 120:	8c 01       	movw	r16, r24
 122:	9d 01       	movw	r18, r26
 124:	00 0f       	add	r16, r16
 126:	11 1f       	adc	r17, r17
 128:	22 1f       	adc	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	80 0f       	add	r24, r16
 12e:	91 1f       	adc	r25, r17
 130:	a2 1f       	adc	r26, r18
 132:	b3 1f       	adc	r27, r19
 134:	8c 01       	movw	r16, r24
 136:	9d 01       	movw	r18, r26
 138:	00 0f       	add	r16, r16
 13a:	11 1f       	adc	r17, r17
 13c:	22 1f       	adc	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	00 0f       	add	r16, r16
 142:	11 1f       	adc	r17, r17
 144:	22 1f       	adc	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	80 0f       	add	r24, r16
 14a:	91 1f       	adc	r25, r17
 14c:	a2 1f       	adc	r26, r18
 14e:	b3 1f       	adc	r27, r19
 150:	8c 01       	movw	r16, r24
 152:	9d 01       	movw	r18, r26
 154:	00 0f       	add	r16, r16
 156:	11 1f       	adc	r17, r17
 158:	22 1f       	adc	r18, r18
 15a:	33 1f       	adc	r19, r19
 15c:	c0 0e       	add	r12, r16
 15e:	d1 1e       	adc	r13, r17
 160:	e2 1e       	adc	r14, r18
 162:	f3 1e       	adc	r15, r19
 164:	c0 92 04 01 	sts	0x0104, r12	; 0x800104 <_end>
 168:	d0 92 05 01 	sts	0x0105, r13	; 0x800105 <_end+0x1>
 16c:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <_end+0x2>
 170:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <_end+0x3>
		bverall/=100;
 174:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_end>
 178:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_end+0x1>
 17c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_end+0x2>
 180:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_end+0x3>
 184:	24 e6       	ldi	r18, 0x64	; 100
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	40 e0       	ldi	r20, 0x00	; 0
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	0e 94 80 01 	call	0x300	; 0x300 <__udivmodsi4>
 190:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <_end>
 194:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <_end+0x1>
 198:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <_end+0x2>
 19c:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <_end+0x3>
	b_1 =bverall/1000;
 1a0:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_end>
 1a4:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_end+0x1>
 1a8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_end+0x2>
 1ac:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_end+0x3>
 1b0:	28 ee       	ldi	r18, 0xE8	; 232
 1b2:	33 e0       	ldi	r19, 0x03	; 3
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	0e 94 80 01 	call	0x300	; 0x300 <__udivmodsi4>
 1bc:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 1c0:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	adc_pin_disable(1);
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	0e 94 c6 01 	call	0x38c	; 0x38c <adc_pin_disable>

}
 1ca:	1f 91       	pop	r17
 1cc:	0f 91       	pop	r16
 1ce:	ff 90       	pop	r15
 1d0:	ef 90       	pop	r14
 1d2:	df 90       	pop	r13
 1d4:	cf 90       	pop	r12
 1d6:	08 95       	ret

Disassembly of section .text.main:

000002ac <main>:



int main(void)
{
	ADC_Init();										/* Initialize ADC */
 2ac:	0e 94 00 02 	call	0x400	; 0x400 <ADC_Init>
	DDRB |= 1<< PINB1 | 1<<PINB2 ;					/* Make OC1A OC1B pin as output */
 2b0:	84 b1       	in	r24, 0x04	; 4
 2b2:	86 60       	ori	r24, 0x06	; 6
 2b4:	84 b9       	out	0x04, r24	; 4
	
	ICR1 = 4999;									/* Set TOP count for timer1 in ICR1 register */
 2b6:	87 e8       	ldi	r24, 0x87	; 135
 2b8:	93 e1       	ldi	r25, 0x13	; 19
 2ba:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2be:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A = (1<<WGM11)|(1<<COM1A1)|(1<<COM1B1);				/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/prescaler64 */
 2c2:	82 ea       	ldi	r24, 0xA2	; 162
 2c4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
 2c8:	8b e1       	ldi	r24, 0x1B	; 27
 2ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>


	
	while(1)
	{
		adc_convrt_a_1();
 2ce:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <adc_convrt_a_1>
		
		adc_convrt_b_1();
 2d2:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
		
		
		OCR1A =a_1 +125;
 2d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <a_1>
 2da:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <a_1+0x1>
 2de:	83 58       	subi	r24, 0x83	; 131
 2e0:	9f 4f       	sbci	r25, 0xFF	; 255
 2e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B =b_1 +125;
 2ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2f2:	83 58       	subi	r24, 0x83	; 131
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2fa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 2fe:	e7 cf       	rjmp	.-50     	; 0x2ce <main+0x22>

Disassembly of section .text.libgcc.div:

00000300 <__udivmodsi4>:
 300:	a1 e2       	ldi	r26, 0x21	; 33
 302:	1a 2e       	mov	r1, r26
 304:	aa 1b       	sub	r26, r26
 306:	bb 1b       	sub	r27, r27
 308:	fd 01       	movw	r30, r26
 30a:	0d c0       	rjmp	.+26     	; 0x326 <__udivmodsi4_ep>

0000030c <__udivmodsi4_loop>:
 30c:	aa 1f       	adc	r26, r26
 30e:	bb 1f       	adc	r27, r27
 310:	ee 1f       	adc	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	a2 17       	cp	r26, r18
 316:	b3 07       	cpc	r27, r19
 318:	e4 07       	cpc	r30, r20
 31a:	f5 07       	cpc	r31, r21
 31c:	20 f0       	brcs	.+8      	; 0x326 <__udivmodsi4_ep>
 31e:	a2 1b       	sub	r26, r18
 320:	b3 0b       	sbc	r27, r19
 322:	e4 0b       	sbc	r30, r20
 324:	f5 0b       	sbc	r31, r21

00000326 <__udivmodsi4_ep>:
 326:	66 1f       	adc	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	88 1f       	adc	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	1a 94       	dec	r1
 330:	69 f7       	brne	.-38     	; 0x30c <__udivmodsi4_loop>
 332:	60 95       	com	r22
 334:	70 95       	com	r23
 336:	80 95       	com	r24
 338:	90 95       	com	r25
 33a:	9b 01       	movw	r18, r22
 33c:	ac 01       	movw	r20, r24
 33e:	bd 01       	movw	r22, r26
 340:	cf 01       	movw	r24, r30
 342:	08 95       	ret

Disassembly of section .text.libgcc.mul:

000003c2 <__muluhisi3>:
 3c2:	0e 94 b7 01 	call	0x36e	; 0x36e <__umulhisi3>
 3c6:	a5 9f       	mul	r26, r21
 3c8:	90 0d       	add	r25, r0
 3ca:	b4 9f       	mul	r27, r20
 3cc:	90 0d       	add	r25, r0
 3ce:	a4 9f       	mul	r26, r20
 3d0:	80 0d       	add	r24, r0
 3d2:	91 1d       	adc	r25, r1
 3d4:	11 24       	eor	r1, r1
 3d6:	08 95       	ret

Disassembly of section .text.libgcc.mul:

0000036e <__umulhisi3>:
 36e:	a2 9f       	mul	r26, r18
 370:	b0 01       	movw	r22, r0
 372:	b3 9f       	mul	r27, r19
 374:	c0 01       	movw	r24, r0
 376:	a3 9f       	mul	r26, r19
 378:	70 0d       	add	r23, r0
 37a:	81 1d       	adc	r24, r1
 37c:	11 24       	eor	r1, r1
 37e:	91 1d       	adc	r25, r1
 380:	b2 9f       	mul	r27, r18
 382:	70 0d       	add	r23, r0
 384:	81 1d       	adc	r24, r1
 386:	11 24       	eor	r1, r1
 388:	91 1d       	adc	r25, r1
 38a:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000041a <_fini>:
 41a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000041c <__funcs_on_exit>:
 41c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000041e <__simulator_exit>:
 41e:	08 95       	ret

Disassembly of section .text.exit:

000003d8 <exit>:
 3d8:	ec 01       	movw	r28, r24
 3da:	0e 94 0e 02 	call	0x41c	; 0x41c <__funcs_on_exit>
 3de:	0e 94 0d 02 	call	0x41a	; 0x41a <_fini>
 3e2:	ce 01       	movw	r24, r28
 3e4:	0e 94 0f 02 	call	0x41e	; 0x41e <__simulator_exit>
 3e8:	ce 01       	movw	r24, r28
 3ea:	0e 94 0b 02 	call	0x416	; 0x416 <_Exit>

Disassembly of section .text._Exit:

00000416 <_Exit>:
 416:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
