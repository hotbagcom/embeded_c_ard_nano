
blinkwitharray.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000164  000001f8  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000227  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000235  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099a  00000000  00000000  0000025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d2  00000000  00000000  00000bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000272  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000153c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cf  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001857  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000014c  0000014c  000001e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001870  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.hard    00000018  0000011e  0000011e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       0000000a  00800100  0000015a  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 16 .text.main    0000005a  000000c4  000000c4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  00000154  00000154  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000156  00000156  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000158  00000158  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000136  00000136  000001ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  00000150  00000150  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
   c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  40:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0a       	sbc	r0, r17
  6c:	00 01       	movw	r0, r0
  6e:	5a 00       	.word	0x005a	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	e8 e6       	ldi	r30, 0x68	; 104
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	17 c0       	rjmp	.+46     	; 0xb2 <__do_clear_bss+0x8>
  84:	b5 91       	lpm	r27, Z+
  86:	a5 91       	lpm	r26, Z+
  88:	35 91       	lpm	r19, Z+
  8a:	25 91       	lpm	r18, Z+
  8c:	05 91       	lpm	r16, Z+
  8e:	07 fd       	sbrc	r16, 7
  90:	0c c0       	rjmp	.+24     	; 0xaa <__do_clear_bss>
  92:	95 91       	lpm	r25, Z+
  94:	85 91       	lpm	r24, Z+
  96:	ef 01       	movw	r28, r30
  98:	f9 2f       	mov	r31, r25
  9a:	e8 2f       	mov	r30, r24
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a2 17       	cp	r26, r18
  a2:	b3 07       	cpc	r27, r19
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0x20>
  a6:	fe 01       	movw	r30, r28
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <__do_clear_bss+0x8>

000000aa <__do_clear_bss>:
  aa:	1d 92       	st	X+, r1
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	e1 f7       	brne	.-8      	; 0xaa <__do_clear_bss>
  b2:	ef 36       	cpi	r30, 0x6F	; 111
  b4:	f4 07       	cpc	r31, r20
  b6:	31 f7       	brne	.-52     	; 0x84 <__do_copy_data+0x8>
  b8:	0e 94 62 00 	call	0xc4	; 0xc4 <_etext>
  bc:	0c 94 9b 00 	jmp	0x136	; 0x136 <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

0000014c <__bad_interrupt>:
 14c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.hard:

0000011e <hard>:
						
				}    
}

void hard(uint8_t input){
	DDRD = 0xF0; //I am not using D 0,1,2 and 3 pins , D 4,5,6,7 are out put from my chip
 11e:	90 ef       	ldi	r25, 0xF0	; 240
 120:	9a b9       	out	0x0a, r25	; 10
	DDRB = 0x0F; //I'm given D 8,9,10 and 11 pins as output
 122:	9f e0       	ldi	r25, 0x0F	; 15
 124:	94 b9       	out	0x04, r25	; 4
	PORTD = 0x00; //using this post for last four input bit
 126:	1b b8       	out	0x0b, r1	; 11
	PORTB = 0x00; //using this post for first four input bit
 128:	15 b8       	out	0x05, r1	; 5
	
	PORTB = (0x0F & input);		//take only first four bit 
 12a:	98 2f       	mov	r25, r24
 12c:	9f 70       	andi	r25, 0x0F	; 15
 12e:	95 b9       	out	0x05, r25	; 5
	PORTD = (0xF0 & input);		//take only last four bit
 130:	80 7f       	andi	r24, 0xF0	; 240
 132:	8b b9       	out	0x0b, r24	; 11
 134:	08 95       	ret

Disassembly of section .text.main:

000000c4 <main>:
#include <util/delay.h>

void hard(uint8_t input);				

int main()
{	//I made a mistake in here by using D0 and D1 pins 
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	2a 97       	sbiw	r28, 0x0a	; 10
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
	//Which used by atmega 328p chip as UART connection
	//so that I am using D 4,5,6,7 as A,B,C,D AND D 8,9,10,11 as E,F,G,(DP)
	
	DDRD =0b01111111;	//0b(DP)GFEDCBA 
  d8:	8f e7       	ldi	r24, 0x7F	; 127
  da:	8a b9       	out	0x0a, r24	; 10
						//DP for Dot Point but I did not use 
	
	uint8_t	 SSdp[10]={  
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	e0 e0       	ldi	r30, 0x00	; 0
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	de 01       	movw	r26, r28
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	8a 95       	dec	r24
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x22>
	
	uint8_t num =0;
				while(1)
				{
					
					for (num = 0; num<10 ;num++)
  ee:	10 e0       	ldi	r17, 0x00	; 0
  f0:	13 c0       	rjmp	.+38     	; 0x118 <main+0x54>
					{
						hard(SSdp[num]) ; 
  f2:	e1 e0       	ldi	r30, 0x01	; 1
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ec 0f       	add	r30, r28
  f8:	fd 1f       	adc	r31, r29
  fa:	e1 0f       	add	r30, r17
  fc:	f1 1d       	adc	r31, r1
  fe:	80 81       	ld	r24, Z
 100:	0e 94 8f 00 	call	0x11e	; 0x11e <hard>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	87 ea       	ldi	r24, 0xA7	; 167
 108:	91 e6       	ldi	r25, 0x61	; 97
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x46>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x50>
 114:	00 00       	nop
	
	uint8_t num =0;
				while(1)
				{
					
					for (num = 0; num<10 ;num++)
 116:	1f 5f       	subi	r17, 0xFF	; 255
 118:	1a 30       	cpi	r17, 0x0A	; 10
 11a:	58 f3       	brcs	.-42     	; 0xf2 <main+0x2e>
 11c:	e8 cf       	rjmp	.-48     	; 0xee <main+0x2a>

Disassembly of section .text.__dummy_fini:

00000154 <_fini>:
 154:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000156 <__funcs_on_exit>:
 156:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000158 <__simulator_exit>:
 158:	08 95       	ret

Disassembly of section .text.exit:

00000136 <exit>:
 136:	ec 01       	movw	r28, r24
 138:	0e 94 ab 00 	call	0x156	; 0x156 <__funcs_on_exit>
 13c:	0e 94 aa 00 	call	0x154	; 0x154 <_fini>
 140:	ce 01       	movw	r24, r28
 142:	0e 94 ac 00 	call	0x158	; 0x158 <__simulator_exit>
 146:	ce 01       	movw	r24, r28
 148:	0e 94 a8 00 	call	0x150	; 0x150 <_Exit>

Disassembly of section .text._Exit:

00000150 <_Exit>:
 150:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>
