


//25khz ile motor sürücü kontrolü yapılacak
//encoder ile üretilen bir dakga 6 khhz ile 3 khz arasında
// ben birinin değişimi ile diğerinin değişimi arsaındaki zamanı ölçeceğim
//iki fonksiyon olacak bir hızı sabitleyen diğeri pwm i sabitleyen

/// conig file
#ifndef F_CPU
#define F_CPU 16000000UL
#endif

#define ui8  uint8_t
#define ui16  uint16_t
#define ui32  uint32_t
#define uc8  unsigned char

///personal variable
#define RX_BUFFER_SIZE 128
volatile static ui8 rx_buffer[RX_BUFFER_SIZE] = {0};
volatile static ui16 rx_count = 0;
volatile static ui8 uart_tx_busy = 1;

int ocr0b = 0;
ui16 desired_freq = 4000 ; //rpm //adc değerini bununla bağlantıla
ui16 encoder_freq;
ui8 print_dist[40] ;



static ui8  ocrsetted = 0;
static ui16  quar_periode = 0; 
volatile static ui8  adc_convert_done = 1;

ISR(INT0_vect){//activate any logic chance of input signal (when you release push button)
  if (ocrsetted ==1 ){// ocrN  isnot 0
  quar_periode=getTCNT1();
  ocrsetted=0;
  }
  else{// ocrN set to 0 
    setOCR1A(0);
    ocrsetted = 1;
  }
}
ISR(INT1_vect){//activate any logic chance of input signal
	 if (ocrsetted ==1 ){// ocrN  isnot 0
  quar_periode=getTCNT1();
  ocrsetted=0;
  }
  else{// ocrN set to 0 
    setOCR1A(0);
    ocrsetted = 1;
  }
}

ISR(ADC_vect){
	adc_convert_done = 1;
}

ISR(USART_RX_vect){
	
	volatile static ui16 rx_write_pos = 0;
	
	rx_buffer[rx_write_pos] = UDR0;
	rx_count++;
	rx_write_pos++;
	if(rx_write_pos >= RX_BUFFER_SIZE){
		rx_write_pos = 0;
	}
	
}
ISR(USART_TX_vect){
	uart_tx_busy = 1;
}


//functions
///pwm functions
  void setOCR1A(ui16 ocr1a){
    OCR1A = ocr1a;
  }
  void setOCR0B(ui16 ocr0b){
    OCR0B = ocr0b;
  }
  ui16 getTCNT1(void){
    return (TCNT1L)|(TCNT1H <<8);
  }
  void pwmdef_freq(ui8 timtype, ui16 cyclefreq){
    
    int tim_eighbit = 1- (timtype%2) ;
    //1(0001) 8(0010) 64(0110) 256(1000) 1024(1010)
    ui8 prescalar ; 
    if(cyclefreq<F_CPU/(1024*8*(2-tim_eighbit))){
      prescalar = 10;
    }
    if(cyclefreq<F_CPU/(256*8*(2-tim_eighbit))){
      prescalar = 8;
    }
    if(cyclefreq<F_CPU/(64*8*(2-tim_eighbit))){
      prescalar = 6;
    }
    if(cyclefreq<F_CPU/(8*8*(2-tim_eighbit))){
      prescalar = 2;
    }
    if(cyclefreq<F_CPU/(1*8*(2-tim_eighbit))){
      prescalar = 1;
    }
    
    if (timtype == 0)
    {
      TCCR0A = ((0b1010)<<4) | (0x0F & 0b11);
      TCCR0B = (0xF0 & TCCR0B) | (0x0F & prescalar);
      
    } 
    else if (timtype == 1)
    {
      TCCR1A = (0xF0 & (0b1010)<<4) | (0x0F & 2);
      TCCR1B = (0xF0 & TCCR1B) | (0x0F & prescalar);
      
    } 
    else
    {
      TCCR2A = (0xF0 & (0b1010)<<4) | (0x0F & 0b11);
      TCCR2B = (0xF0 & TCCR2B) | (0x0F & prescalar);
    }
  
  }
void pwmdef_pin(ui8 pin){   // pin 
//	DDRB //1 çıkış //0 giriş
//	PORTB //1 high //0 low
//OC0A PD6 6
//OC0B PD5 5
//OC1A PB1 9
//OC1B PB2 10
//OC2A PB3 11
//OC2B PD3 3
	switch(pin){
		 case 6:
		 DDRD |= (1<<6); 
		 TIMSK0 |=(1<<OCIE0A);
		 break;
		 
		 case 5:		 DDRD |= (1<<5);
		 TIMSK0 |=(1<<OCIE0B);
		 break;
		 
		 case 9:
		 DDRB |= (1<<1);
		 TIMSK1 |=(1<<OCIE1A);
		 break;
		 
		 case 10:
		 DDRB |= (1<<2);
		 TIMSK1 |=(1<<OCIE1B);
		 break;
		 
		 case 11:
		 DDRB |= (1<<3);
		 TIMSK2 |=(1<<OCIE2A);
		 break;
		 
		 case 3:
		 DDRD |= (1<<3);
		 TIMSK2 |=(1<<OCIE2B);
		 break;
		
	}

}


///ADC functions

  void adc_init(void){
    ADMUX |= 0X01 << REFS0 ;
    //ADMUX |= 0X01 <<ADLAR ;//left adjust result  // comment when you want to adjust left 
    //ADMUX |= 0X01 <<sellected_pin
    ADCSRA |= (0X1 <<ADEN) | (0X01 <<ADIF) | (0X7 <<ADPS0);
  }
  void adc_pin_enable(uint8_t pin){
	  DIDR0 |= (0x01 << pin);
  }
  void adc_pin_sellect(uint8_t source){
    ADMUX &= (0xF0);
    ADMUX |= (source);
  }
  ui16 adc_convert(void){
    ui8 adcl = 0;
    ui16 adch = 0;
    adc_convert_done = 0;
    ADCSRA |= 0x1 << ADSC;
    while(adc_convert_done == 0);
    
    adcl = ADCL;
    adch = ADCH;
    
    return (adch << 8 | adcl);
  }


///UART function

  void uart_init(uint32_t baud,uint8_t high_speed){
    
    uint8_t speed = 16;
    
    if(high_speed != 0){
      speed = 8;
      UCSR0A |= 1 << U2X0;//set U2X0 to 1 for fast transtion
    }
    
    baud = (F_CPU/(speed*baud)) - 1;
    
    UBRR0H = (baud & 0x0F00) >> 8;
    UBRR0L = (baud & 0x00FF);
    
    UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << TXCIE0) | (1 << RXCIE0);
  }
  void uart_send_byte(uint8_t c){
    while(uart_tx_busy == 0);
    uart_tx_busy = 0;
    UDR0 = c;
  }
  void uart_send_string(uint8_t *c){
    uint16_t i = 0;
    do{
      uart_send_byte(c[i]);
      i++;
      
    }while(c[i] != '\0');
    uart_send_byte(c[i]);
  }
  uint16_t uart_read_count(void){
    return rx_count;
  }
  uint8_t uart_read(void){
    static uint16_t rx_read_pos = 0;
    uint8_t data = 0;
    
    data = rx_buffer[rx_read_pos];
    rx_read_pos++;
    rx_count--;
    if(rx_read_pos >= RX_BUFFER_SIZE){
      rx_read_pos = 0;
    }
    return data;
  }

void setup() {
 

//pwm timer ayarla 
  PORTD = 0x00; 
  //Makes all PORTD Pins LOW 
  pwmdef_freq(0,25000);
	pwmdef_pin(5);

//pd2/pd3 //extrnal interrupt
	DDRD &= ~(0b11<<2); //Makes PORTD  2 and 3 set as Input
  EICRA = 0x05;//0b0000 0101 
	//masks ISC11 and ISC10  ISC01 and ISC00 .
	//ISC1x is logic change interrupt
	//ISC0x is logic chance interrupt
	//0b (INT1)01[any logical change] (INT0)01[logical]
	pwmdef_freq(1,6000); // dönş freq
	pwmdef_pin(9);//ocr1a
  TCCR1A = ((0b0101)<<4) | (0x0F & 0b11);
  //pwm üretmesin ocr1a adece counter için 

//analog ayarla 
  adc_init();
	adc_pin_enable(0);
	adc_pin_sellect(0);


//Uart ararla
  DDRD |= 0x02; //0b00000010
	uart_init(9600,0);


  sei();



}

///state machine 
  void check_rpm(){
    if(encoder_freq <desired_freq+20){
      setOCR0B(ocr0b++);
    }
    else if(encoder_freq >desired_freq -20 )
      setOCR0B(ocr0b--);
  }
  void get_quadrafreq(){
    return F_CPU/(pres) quar_periode//int olarak quadraperiodu  yı basıyor
  }
  void set_desired(){
    desired_freq= 3000 + 3*adc_convert(); // updade desired with  the analog to digital value 
  }
  void send_uart(){
    memset(print_dist,0,sizeof(print_dist));
			   sprintf((char*)print_dist," desired frquency %u and encoder freq : %u  \n \r",desired_freq  ,encoderfreq );
			   uart_send_string(print_dist);
  }



void loop() {
  check_rpm();//uses digital schmitt trigger
  encoder_freq = get_quadrafreq();
  set_desired();//updates potansiometer value
  send_uart();//sends the values
}
