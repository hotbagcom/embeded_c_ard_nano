
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000342  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000371  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  0000037f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e3c  00000000  00000000  0000040f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075e  00000000  00000000  0000124b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000457  00000000  00000000  000019a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00001e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00001f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f9  00000000  00000000  000021a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002599  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000027c  0000027c  00000330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000260c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000004a  0000018c  0000018c  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_12 00000032  00000216  00000216  000002ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_10 00000040  000001d6  000001d6  0000028a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_11 00000054  00000138  00000138  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.counter  00000001  00800184  00800184  00000342  2**0
                  ALLOC
 19 .data.toogle_A 00000001  00800185  0000028a  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 20 .data.toogle_C 00000001  00800186  0000028b  0000033f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .data.toogle_B 00000001  00800187  0000028c  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .text.__vector_18 00000070  000000c8  000000c8  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_20 0000001e  00000248  00000248  000002fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.rx_write_pos.1966 00000002  00800180  00800180  00000342  2**0
                  ALLOC
 25 .data.uart_tx_busy 00000001  00800188  0000028d  00000341  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 26 .bss.rx_count 00000002  00800182  00800182  00000342  2**0
                  ALLOC
 27 .bss.rx_buffer 00000080  00800100  00800100  00000342  2**0
                  ALLOC
 28 .text.__dummy_fini 00000002  00000284  00000284  00000338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  00000286  00000286  0000033a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  00000288  00000288  0000033c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    00000016  00000266  00000266  0000031a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000004  00000280  00000280  00000334  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
   8:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
   c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  10:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  14:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  18:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  1c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  20:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  24:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  28:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_10>
  2c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_11>
  30:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_12>
  34:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  38:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  3c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  40:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  44:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_etext>
  4c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_20>
  54:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  58:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  5c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  60:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>
  64:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 85       	ldd	r16, Z+9	; 0x09
  6c:	80 01       	movw	r16, r0
  6e:	85 01       	movw	r16, r10
  70:	89 00       	.word	0x0089	; ????
  72:	02 8a       	std	Z+18, r0	; 0x12

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
  c0:	0c 94 33 01 	jmp	0x266	; 0x266 <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

0000027c <__bad_interrupt>:
 27c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.main:

0000018c <main>:

 
int main(void)
{
	
	DDRB = 0x7;//(portB 0 1 2 output)
 18c:	87 e0       	ldi	r24, 0x07	; 7
 18e:	84 b9       	out	0x04, r24	; 4
	//  1     1     1     1    OCR1A       BOTTOM                   TOP                     Fast PWM
	//CS12  CS11  CS10  Prescaler
	// 0     1     1      64
	//COM1A1  COM1A0  COM1B1  COM1B0     (For Fast PWM Compare Mode)
	//  1       1       1       1    Set OC1A/OC1B on compare match, clear OC1A/OC1B at	BOTTOM (inverting mode)
	TCCR1B |= (3<<WGM12) | (3<<CS10);
 190:	e1 e8       	ldi	r30, 0x81	; 129
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8b 61       	ori	r24, 0x1B	; 27
 198:	80 83       	st	Z, r24
	TCCR1A |= (3<<WGM10) | (15<<COM1B0);
 19a:	e0 e8       	ldi	r30, 0x80	; 128
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	83 6f       	ori	r24, 0xF3	; 243
 1a2:	80 83       	st	Z, r24

	
	//clk =(16E6)^-1 prescaler = 64 => Target ferq : 4E-6    1ms takes 250 cycle 
	OCR1B = (250*11)-1;//10ms = 250*11/4E-6 sec
 1a4:	8d eb       	ldi	r24, 0xBD	; 189
 1a6:	9a e0       	ldi	r25, 0x0A	; 10
 1a8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1ac:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	ICR1 = (250*61)-1;//31ms = 250*61/4E-6  sec
 1b0:	81 e9       	ldi	r24, 0x91	; 145
 1b2:	9b e3       	ldi	r25, 0x3B	; 59
 1b4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1b8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = (250*72)-1;//72ms = 250*72/4E-6 sec  top = ocr1a
 1bc:	8f e4       	ldi	r24, 0x4F	; 79
 1be:	96 e4       	ldi	r25, 0x46	; 70
 1c0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1c4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 |= (1<<ICIE1) |(1<<OCIE1B) | (1<<OCIE1A);// Set Enable 
 1c8:	ef e6       	ldi	r30, 0x6F	; 111
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	86 62       	ori	r24, 0x26	; 38
 1d0:	80 83       	st	Z, r24
	
	
	//uart_init(9600,0);
	//uart_send_string(start);
	
	sei();//Activate Global Interrupt
 1d2:	78 94       	sei
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <main+0x48>

Disassembly of section .text.__vector_12:

00000216 <__vector_12>:

}



ISR(TIMER1_COMPB_vect){//1110
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
	PORTB = (PORTB & 0xFE) | (toogle_B<<PORTB0);
 224:	85 b1       	in	r24, 0x05	; 5
 226:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <toogle_B>
 22a:	8e 7f       	andi	r24, 0xFE	; 254
 22c:	89 2b       	or	r24, r25
 22e:	85 b9       	out	0x05, r24	; 5
	toogle_B = ~toogle_B;
 230:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <toogle_B>
 234:	80 95       	com	r24
 236:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <toogle_B>
}
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

Disassembly of section .text.__vector_10:

000001d6 <__vector_10>:



ISR(TIMER1_CAPT_vect){//1101
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
	PORTB = (PORTB & 0xFD) | (toogle_C<<PORTB1);
 1e6:	25 b1       	in	r18, 0x05	; 5
 1e8:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <toogle_C>
 1ec:	89 2f       	mov	r24, r25
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	92 2f       	mov	r25, r18
 1f6:	9d 7f       	andi	r25, 0xFD	; 253
 1f8:	89 2b       	or	r24, r25
 1fa:	85 b9       	out	0x05, r24	; 5
	toogle_C = ~toogle_C;
 1fc:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <toogle_C>
 200:	80 95       	com	r24
 202:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <toogle_C>
}
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

Disassembly of section .text.__vector_11:

00000138 <__vector_11>:



ISR(TIMER1_COMPA_vect){//1011
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
	PORTB = (PORTB & 0xFB) | (toogle_A<<PORTB2);
 148:	25 b1       	in	r18, 0x05	; 5
 14a:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <toogle_A>
 14e:	89 2f       	mov	r24, r25
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	92 2f       	mov	r25, r18
 15c:	9b 7f       	andi	r25, 0xFB	; 251
 15e:	89 2b       	or	r24, r25
 160:	85 b9       	out	0x05, r24	; 5
	toogle_A = ~toogle_A;
 162:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <toogle_A>
 166:	80 95       	com	r24
 168:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <toogle_A>
	//memset(print_buffer,0,sizeof(print_buffer));
	//sprintf((char*)print_buffer,"%04x \n\r", counter);
	//uart_send_string(print_buffer);

	counter++;
 16c:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <counter>
 170:	8f 5f       	subi	r24, 0xFF	; 255
 172:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <counter>
	TIFR1 &= ~(1<<OCF1A);
 176:	86 b3       	in	r24, 0x16	; 22
 178:	8d 7f       	andi	r24, 0xFD	; 253
 17a:	86 bb       	out	0x16, r24	; 22
}
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

Disassembly of section .text.__vector_18:

000000c8 <__vector_18>:

volatile static uint8_t rx_buffer[RX_BUFFER_SIZE] = {0};
volatile static uint16_t rx_count = 0;
volatile static uint8_t uart_tx_busy = 1;

ISR(USART_RX_vect){
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	
	volatile static uint16_t rx_write_pos = 0;
	
	rx_buffer[rx_write_pos] = UDR0;
  da:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <rx_write_pos.1966>
  de:	f0 91 81 01 	lds	r31, 0x0181	; 0x800181 <rx_write_pos.1966+0x1>
  e2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e6:	e0 50       	subi	r30, 0x00	; 0
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	80 83       	st	Z, r24
	rx_count++;
  ec:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rx_count>
  f0:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <rx_count+0x1>
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <rx_count+0x1>
  fa:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <rx_count>
	rx_write_pos++;
  fe:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rx_write_pos.1966>
 102:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <rx_write_pos.1966+0x1>
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <rx_write_pos.1966+0x1>
 10c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <rx_write_pos.1966>
	if(rx_write_pos >= RX_BUFFER_SIZE){
 110:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <rx_write_pos.1966>
 114:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <rx_write_pos.1966+0x1>
 118:	80 38       	cpi	r24, 0x80	; 128
 11a:	91 05       	cpc	r25, r1
 11c:	20 f0       	brcs	.+8      	; 0x126 <__vector_18+0x5e>
		rx_write_pos = 0;
 11e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <rx_write_pos.1966+0x1>
 122:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <rx_write_pos.1966>
	}
	
}
 126:	ff 91       	pop	r31
 128:	ef 91       	pop	r30
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

Disassembly of section .text.__vector_20:

00000248 <__vector_20>:


ISR(USART_TX_vect){
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	8f 93       	push	r24
	uart_tx_busy = 1;
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <uart_tx_busy>
}
 25a:	8f 91       	pop	r24
 25c:	0f 90       	pop	r0
 25e:	0f be       	out	0x3f, r0	; 63
 260:	0f 90       	pop	r0
 262:	1f 90       	pop	r1
 264:	18 95       	reti

Disassembly of section .text.__dummy_fini:

00000284 <_fini>:
 284:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000286 <__funcs_on_exit>:
 286:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000288 <__simulator_exit>:
 288:	08 95       	ret

Disassembly of section .text.exit:

00000266 <exit>:
 266:	ec 01       	movw	r28, r24
 268:	0e 94 43 01 	call	0x286	; 0x286 <__funcs_on_exit>
 26c:	0e 94 42 01 	call	0x284	; 0x284 <_fini>
 270:	ce 01       	movw	r24, r28
 272:	0e 94 44 01 	call	0x288	; 0x288 <__simulator_exit>
 276:	ce 01       	movw	r24, r28
 278:	0e 94 40 01 	call	0x280	; 0x280 <_Exit>

Disassembly of section .text._Exit:

00000280 <_Exit>:
 280:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
