
blinkatmg328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001d1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001df  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a2f  00000000  00000000  000001ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068c  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029c  00000000  00000000  000012ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000120  00000120  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000008a  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  00000128  00000128  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  0000012a  0000012a  0000019e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  0000012c  0000012c  000001a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  0000010a  0000010a  0000017e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  00000124  00000124  00000198  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
   8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
   c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  40:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
  64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 85 00 	jmp	0x10a	; 0x10a <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000120 <__bad_interrupt>:
 120:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRC = 0xFF; //Nakes PORTC0 as Output
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	87 b9       	out	0x07, r24	; 7
	
	 
    while(1)
    {
		 //Turns ON  LEDs
		 PORTC = 0x21; //12  ( 0b10 0001)
  84:	81 e2       	ldi	r24, 0x21	; 33
  86:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	83 ed       	ldi	r24, 0xD3	; 211
  8c:	90 e3       	ldi	r25, 0x30	; 48
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	80 40       	sbci	r24, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x18>
  98:	00 00       	nop
		 _delay_ms(1000); //1 second delay
		PORTC = 0x03;  //0b0011
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	88 b9       	out	0x08, r24	; 8
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	83 ed       	ldi	r24, 0xD3	; 211
  a2:	90 e3       	ldi	r25, 0x30	; 48
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x2e>
  ae:	00 00       	nop
		_delay_ms(1000); //1 second delay
		PORTC = 0x06; //0b 0110
  b0:	86 e0       	ldi	r24, 0x06	; 6
  b2:	88 b9       	out	0x08, r24	; 8
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	83 ed       	ldi	r24, 0xD3	; 211
  b8:	90 e3       	ldi	r25, 0x30	; 48
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x3a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x44>
  c4:	00 00       	nop
		_delay_ms(1000); //1 second delay
		PORTC = 0x0C; //12  0b0000 1100
  c6:	8c e0       	ldi	r24, 0x0C	; 12
  c8:	88 b9       	out	0x08, r24	; 8
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	83 ed       	ldi	r24, 0xD3	; 211
  ce:	90 e3       	ldi	r25, 0x30	; 48
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x50>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x5a>
  da:	00 00       	nop
		_delay_ms(1000); //1 second delay
		PORTC = 0x18; //12  0b0001 1000
  dc:	88 e1       	ldi	r24, 0x18	; 24
  de:	88 b9       	out	0x08, r24	; 8
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	83 ed       	ldi	r24, 0xD3	; 211
  e4:	90 e3       	ldi	r25, 0x30	; 48
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x66>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x70>
  f0:	00 00       	nop
		_delay_ms(1000); //1 second delay
		PORTC = 0x30; //12  0b0011 0000
  f2:	80 e3       	ldi	r24, 0x30	; 48
  f4:	88 b9       	out	0x08, r24	; 8
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	83 ed       	ldi	r24, 0xD3	; 211
  fa:	90 e3       	ldi	r25, 0x30	; 48
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x7c>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x86>
 106:	00 00       	nop
 108:	bd cf       	rjmp	.-134    	; 0x84 <main+0x4>

Disassembly of section .text.__dummy_fini:

00000128 <_fini>:
 128:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000012a <__funcs_on_exit>:
 12a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000012c <__simulator_exit>:
 12c:	08 95       	ret

Disassembly of section .text.exit:

0000010a <exit>:
 10a:	ec 01       	movw	r28, r24
 10c:	0e 94 95 00 	call	0x12a	; 0x12a <__funcs_on_exit>
 110:	0e 94 94 00 	call	0x128	; 0x128 <_fini>
 114:	ce 01       	movw	r24, r28
 116:	0e 94 96 00 	call	0x12c	; 0x12c <__simulator_exit>
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 92 00 	call	0x124	; 0x124 <_Exit>

Disassembly of section .text._Exit:

00000124 <_Exit>:
 124:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
