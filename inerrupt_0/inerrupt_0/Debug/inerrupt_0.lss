
inerrupt_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  00000221  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000022f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008b2  00000000  00000000  0000025f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000616  00000000  00000000  00000b11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000220  00000000  00000000  00001127  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000078  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000150  00000150  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000164c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.__vector_1 0000002e  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_2 0000002e  000000f0  000000f0  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000001c  0000011e  0000011e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  00000158  00000158  000001ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  0000015a  0000015a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  0000015c  0000015c  000001f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  0000013a  0000013a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  00000154  00000154  000001e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_etext>
   8:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_2>
   c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  14:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  28:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  30:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  34:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  44:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  5c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
  64:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  ba:	0c 94 9d 00 	jmp	0x13a	; 0x13a <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000150 <__bad_interrupt>:
 150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_1:

000000c2 <__vector_1>:
#include <stdint.h>
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
uint8_t toogle ;
ISR(INT0_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
	PORTB = toogle<<5;
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d2:	82 95       	swap	r24
  d4:	88 0f       	add	r24, r24
  d6:	80 7e       	andi	r24, 0xE0	; 224
  d8:	85 b9       	out	0x05, r24	; 5
	toogle = ~toogle; 
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  de:	80 95       	com	r24
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	//EIFR &= ~(0x1<<INTF0);
}
  e4:	8f 91       	pop	r24
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

Disassembly of section .text.__vector_2:

000000f0 <__vector_2>:
ISR(INT1_vect){
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
	PORTB = toogle<<5;
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 100:	82 95       	swap	r24
 102:	88 0f       	add	r24, r24
 104:	80 7e       	andi	r24, 0xE0	; 224
 106:	85 b9       	out	0x05, r24	; 5
	toogle= ~toogle;
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10c:	80 95       	com	r24
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	//EIFR &=  ~(0x1<<INTF1); 
}
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

Disassembly of section .text.main:

0000011e <main>:

int main(void)
{
	//pd2 in button
	DDRD = 0xFC; //0b1111 0011
 11e:	8c ef       	ldi	r24, 0xFC	; 252
 120:	8a b9       	out	0x0a, r24	; 10
	//pb5 out led 
	DDRB  =0x20; //0b0010 0000
 122:	80 e2       	ldi	r24, 0x20	; 32
 124:	84 b9       	out	0x04, r24	; 4
	
	EICRA = 0x06; //falling edge interupt 0b (INT1)01[any logical change] (INT0)10[_falling]
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0x03; // masks ISC11 and ISC10  ISC01 and ISC00 
 12c:	83 e0       	ldi	r24, 0x03	; 3
 12e:	8d bb       	out	0x1d, r24	; 29
	sei();
 130:	78 94       	sei
	
	toogle =0x1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 138:	ff cf       	rjmp	.-2      	; 0x138 <main+0x1a>

Disassembly of section .text.__dummy_fini:

00000158 <_fini>:
 158:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000015a <__funcs_on_exit>:
 15a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000015c <__simulator_exit>:
 15c:	08 95       	ret

Disassembly of section .text.exit:

0000013a <exit>:
 13a:	ec 01       	movw	r28, r24
 13c:	0e 94 ad 00 	call	0x15a	; 0x15a <__funcs_on_exit>
 140:	0e 94 ac 00 	call	0x158	; 0x158 <_fini>
 144:	ce 01       	movw	r24, r28
 146:	0e 94 ae 00 	call	0x15c	; 0x15c <__simulator_exit>
 14a:	ce 01       	movw	r24, r28
 14c:	0e 94 aa 00 	call	0x154	; 0x154 <_Exit>

Disassembly of section .text._Exit:

00000154 <_Exit>:
 154:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
