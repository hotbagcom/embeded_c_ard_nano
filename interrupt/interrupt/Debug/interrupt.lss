
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000026e  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  0000029d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000972  00000000  00000000  000002d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b9  00000000  00000000  00000c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000029c  00000000  00000000  000012fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ea  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000018e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000001a2  000001a2  00000256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.__vector_1 00000022  0000016a  0000016a  0000021e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .rodata       0000000a  00800101  000001b0  00000264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 17 .text.main    000000a2  000000c8  000000c8  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  000001aa  000001aa  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  000001ac  000001ac  00000260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  000001ae  000001ae  00000262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  0000018c  0000018c  00000240  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  000001a6  000001a6  0000025a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_1>
   8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  10:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  14:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  1c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  20:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  40:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  48:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  4c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  50:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 01       	movw	r16, r0
  6e:	01 01       	movw	r0, r2
  70:	0b 00       	.word	0x000b	; ????
  72:	01 b0       	in	r0, 0x01	; 1

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 64 00 	call	0xc8	; 0xc8 <_etext>
  c0:	0c 94 c6 00 	jmp	0x18c	; 0x18c <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

000001a2 <__bad_interrupt>:
 1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.__vector_1:

0000016a <__vector_1>:

 uint8_t dir;



ISR(INT0_vect){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
	dir ++;
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

Disassembly of section .text.main:

000000c8 <main>:

int main()
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	2a 97       	sbiw	r28, 0x0a	; 10
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61

	//PD2 reserved for interrupt
	uint8_t	 PD[10]={  0b10000010,//1
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	e1 e0       	ldi	r30, 0x01	; 1
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	de 01       	movw	r26, r28
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	8a 95       	dec	r24
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x1e>
					0b11101011,//9
					0b10111011//0
					};
					
				
	DDRD = ~0x04;//PD2 (interrupt 0) except all port output 
  ee:	8b ef       	ldi	r24, 0xFB	; 251
  f0:	8a b9       	out	0x0a, r24	; 10
	
	EICRA = 0x01; //logic change controlled interrupt0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0x1; //masking interrupt 0
  f8:	8d bb       	out	0x1d, r24	; 29
	sei();
  fa:	78 94       	sei
	
	uint8_t seg =1;
	dir = 0x1;
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 100:	01 c0       	rjmp	.+2      	; 0x104 <main+0x3c>
						seg--;
						}
					if(dir%2 && seg==11)
					seg=1;
					if(!dir%2 && seg==0)
					seg=10;
 102:	8a e0       	ldi	r24, 0x0A	; 10
	
					while(1)
				{
					
					
					if((seg<11) & (seg>0))
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	28 0f       	add	r18, r24
 108:	2a 30       	cpi	r18, 0x0A	; 10
 10a:	e0 f4       	brcc	.+56     	; 0x144 <main+0x7c>
					{
						PORTD =  PD[seg-1] ;
 10c:	e8 2f       	mov	r30, r24
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	31 97       	sbiw	r30, 0x01	; 1
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	4c 0f       	add	r20, r28
 118:	5d 1f       	adc	r21, r29
 11a:	e4 0f       	add	r30, r20
 11c:	f5 1f       	adc	r31, r21
 11e:	90 81       	ld	r25, Z
 120:	9b b9       	out	0x0b, r25	; 11
						PORTD |= (PD[seg-1]>>5 & 0x4) ;
 122:	3b b1       	in	r19, 0x0b	; 11
 124:	90 81       	ld	r25, Z
 126:	92 95       	swap	r25
 128:	96 95       	lsr	r25
 12a:	97 70       	andi	r25, 0x07	; 7
 12c:	94 70       	andi	r25, 0x04	; 4
 12e:	93 2b       	or	r25, r19
 130:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	5f ef       	ldi	r21, 0xFF	; 255
 134:	9f e0       	ldi	r25, 0x0F	; 15
 136:	37 e2       	ldi	r19, 0x27	; 39
 138:	51 50       	subi	r21, 0x01	; 1
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	30 40       	sbci	r19, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x70>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x7a>
 142:	00 00       	nop
						_delay_ms(800);
					}
					if (dir%2)
 144:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 148:	39 2f       	mov	r19, r25
 14a:	31 70       	andi	r19, 0x01	; 1
 14c:	90 ff       	sbrs	r25, 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <main+0x8c>
					{
						seg++;
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	01 c0       	rjmp	.+2      	; 0x156 <main+0x8e>
					}
					else{
						seg--;
 154:	82 2f       	mov	r24, r18
						}
					if(dir%2 && seg==11)
 156:	33 23       	and	r19, r19
 158:	19 f0       	breq	.+6      	; 0x160 <main+0x98>
 15a:	8b 30       	cpi	r24, 0x0B	; 11
 15c:	09 f4       	brne	.+2      	; 0x160 <main+0x98>
					seg=1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
					if(!dir%2 && seg==0)
 160:	91 11       	cpse	r25, r1
 162:	d0 cf       	rjmp	.-96     	; 0x104 <main+0x3c>
 164:	88 23       	and	r24, r24
 166:	69 f2       	breq	.-102    	; 0x102 <main+0x3a>
 168:	cd cf       	rjmp	.-102    	; 0x104 <main+0x3c>

Disassembly of section .text.__dummy_fini:

000001aa <_fini>:
 1aa:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001ac <__funcs_on_exit>:
 1ac:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001ae <__simulator_exit>:
 1ae:	08 95       	ret

Disassembly of section .text.exit:

0000018c <exit>:
 18c:	ec 01       	movw	r28, r24
 18e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__funcs_on_exit>
 192:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_fini>
 196:	ce 01       	movw	r24, r28
 198:	0e 94 d7 00 	call	0x1ae	; 0x1ae <__simulator_exit>
 19c:	ce 01       	movw	r24, r28
 19e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_Exit>

Disassembly of section .text._Exit:

000001a6 <_Exit>:
 1a6:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
