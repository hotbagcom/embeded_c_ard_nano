
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000280  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000280  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000002af  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ae  00000000  00000000  000002ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ef  00000000  00000000  00000c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d7  00000000  00000000  0000138a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000010b  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000019db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  000001b4  000001b4  00000268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000019fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.__vector_1 00000022  00000170  00000170  00000224  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.hard    0000000c  000001a8  000001a8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .rodata       0000000a  00800101  000001c2  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .text.main    000000a8  000000c8  000000c8  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  000001bc  000001bc  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  000001be  000001be  00000272  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  000001c0  000001c0  00000274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  00000192  00000192  00000246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  000001b8  000001b8  0000026c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_1>
   8:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
   c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  10:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  18:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  1c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  20:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  24:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  28:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  30:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  38:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  3c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  40:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  44:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  48:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  4c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  50:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  54:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  58:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  60:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>
  64:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 01       	movw	r0, r2
  6c:	80 01       	movw	r16, r0
  6e:	01 01       	movw	r0, r2
  70:	0b 00       	.word	0x000b	; ????
  72:	01 c2       	rjmp	.+1026   	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	e8 e6       	ldi	r30, 0x68	; 104
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	40 e0       	ldi	r20, 0x00	; 0
  86:	17 c0       	rjmp	.+46     	; 0xb6 <__do_clear_bss+0x8>
  88:	b5 91       	lpm	r27, Z+
  8a:	a5 91       	lpm	r26, Z+
  8c:	35 91       	lpm	r19, Z+
  8e:	25 91       	lpm	r18, Z+
  90:	05 91       	lpm	r16, Z+
  92:	07 fd       	sbrc	r16, 7
  94:	0c c0       	rjmp	.+24     	; 0xae <__do_clear_bss>
  96:	95 91       	lpm	r25, Z+
  98:	85 91       	lpm	r24, Z+
  9a:	ef 01       	movw	r28, r30
  9c:	f9 2f       	mov	r31, r25
  9e:	e8 2f       	mov	r30, r24
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a2 17       	cp	r26, r18
  a6:	b3 07       	cpc	r27, r19
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0x20>
  aa:	fe 01       	movw	r30, r28
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__do_clear_bss+0x8>

000000ae <__do_clear_bss>:
  ae:	1d 92       	st	X+, r1
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	e1 f7       	brne	.-8      	; 0xae <__do_clear_bss>
  b6:	e4 37       	cpi	r30, 0x74	; 116
  b8:	f4 07       	cpc	r31, r20
  ba:	31 f7       	brne	.-52     	; 0x88 <__do_copy_data+0x8>
  bc:	0e 94 64 00 	call	0xc8	; 0xc8 <_etext>
  c0:	0c 94 c9 00 	jmp	0x192	; 0x192 <exit>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>

Disassembly of section .text:

000001b4 <__bad_interrupt>:
 1b4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_1:

00000170 <__vector_1>:

uint8_t dir;	//global variable because of we use this variable in 'ISR()' and 'main()' functions
void hard(uint8_t input);


ISR(INT0_vect){//Interrupt service routine
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
	dir ++;
 17c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

Disassembly of section .text.hard:

000001a8 <hard>:
	
}


void hard(uint8_t input){
	PORTB = (0x0F & input);		//take only first four bit
 1a8:	98 2f       	mov	r25, r24
 1aa:	9f 70       	andi	r25, 0x0F	; 15
 1ac:	95 b9       	out	0x05, r25	; 5
	PORTD = (0xF0 & input);		//take only last four bit
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	08 95       	ret

Disassembly of section .text.main:

000000c8 <main>:
ISR(INT0_vect){//Interrupt service routine
	dir ++;
}

int main()
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	2a 97       	sbiw	r28, 0x0a	; 10
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
		//so that I am using D 4,5,6,7 as A,B,C,D AND D 8,9,10,11 as E,F,G,(DP)
		//				 PortD 4,5,6,7			  PortB 0,1, 2, 3
		
		//DP for Dot Point but I did not use

		uint8_t	 SSdp[10]={
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	e1 e0       	ldi	r30, 0x01	; 1
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	de 01       	movw	r26, r28
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	8a 95       	dec	r24
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x1e>
			0b1111111,//8
			0b1101111,//9
		};
					
	//PD2 reserved for interrupt				
	DDRD = ~0x04;		//Port d2 is not output
  ee:	8b ef       	ldi	r24, 0xFB	; 251
  f0:	8a b9       	out	0x0a, r24	; 10
	EICRA = 0x01; //logic change controlled interrupt0 
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0x1; //masking interrupt 0
  f8:	8d bb       	out	0x1d, r24	; 29
	
	//same as a+=1  ======    a=a+1
	//or PORTD |= (0b00111110) ====== PORTD = (PORTD|0X3E)  
	//or DDRC & = ~(0b00001100)  ====== DDRC &= 0b11110011   ===== DDRC = (DDRC & 0b11110011)
	
		DDRD |= 0xF0; //I am not using D 0,1,2 and 3 pins , D 4,5,6,7 are out put from my chip
  fa:	8a b1       	in	r24, 0x0a	; 10
  fc:	80 6f       	ori	r24, 0xF0	; 240
  fe:	8a b9       	out	0x0a, r24	; 10
		//I am not touching D 0,1,2,3 by | (or) symbol 
		// Only changing D 4,5,6,7 pins as output
		
		DDRB |= 0x0F; //I'm given D 8,9,10 and 11 pins as output
 100:	84 b1       	in	r24, 0x04	; 4
 102:	8f 60       	ori	r24, 0x0F	; 15
 104:	84 b9       	out	0x04, r24	; 4
		//similar things happens here only switching PORTB 0,1,2,3 to output
		
		PORTD = 0x00; //using this port for last four input bit
 106:	1b b8       	out	0x0b, r1	; 11
		PORTB = 0x00; //using this port for first four input bit
 108:	15 b8       	out	0x05, r1	; 5
	
	
	sei();
 10a:	78 94       	sei
	
	uint8_t num =1;					//local variable because only used in in 'main()' function
	dir = 0x0;					//set direction as 0 when we not pushing count will increase
 10c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		PORTB = 0x00; //using this port for first four input bit
	
	
	sei();
	
	uint8_t num =1;					//local variable because only used in in 'main()' function
 110:	11 e0       	ldi	r17, 0x01	; 1
 112:	01 c0       	rjmp	.+2      	; 0x116 <main+0x4e>
		}
		
		if((dir& 0x1)==0 && num==11)//if counter increases and showed '9'    set 'num' to show '0'
		num=1;
		if((dir& 0x1)!=0 && num==0)//if counter decreases and showed '0'    set 'num' to show '9'
		num=10;
 114:	1a e0       	ldi	r17, 0x0A	; 10
	
	while(1)
	{
		
		
		if((num<11) & (num>0))// to control direction num:1 shows digit '0' , num:10 shows digit '9' 
 116:	0f ef       	ldi	r16, 0xFF	; 255
 118:	01 0f       	add	r16, r17
 11a:	0a 30       	cpi	r16, 0x0A	; 10
 11c:	a8 f4       	brcc	.+42     	; 0x148 <main+0x80>
		{
			hard(SSdp[num-1]);
 11e:	e1 2f       	mov	r30, r17
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	8c 0f       	add	r24, r28
 12a:	9d 1f       	adc	r25, r29
 12c:	e8 0f       	add	r30, r24
 12e:	f9 1f       	adc	r31, r25
 130:	80 81       	ld	r24, Z
 132:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <hard>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	9f ef       	ldi	r25, 0xFF	; 255
 138:	2f e0       	ldi	r18, 0x0F	; 15
 13a:	87 e2       	ldi	r24, 0x27	; 39
 13c:	91 50       	subi	r25, 0x01	; 1
 13e:	20 40       	sbci	r18, 0x00	; 0
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x74>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x7e>
 146:	00 00       	nop
			_delay_ms(800); //wait for 0.8 second
		}
		
		if ((dir& 0x1)==0 )//if direction false   then increase counter
 148:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14c:	89 2f       	mov	r24, r25
 14e:	81 70       	andi	r24, 0x01	; 1
 150:	90 fd       	sbrc	r25, 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <main+0x90>
		{
			num++;
 154:	1f 5f       	subi	r17, 0xFF	; 255
 156:	02 c0       	rjmp	.+4      	; 0x15c <main+0x94>
		}
		else if((dir& 0x1)!=0)//if direction true   then decrease counter
 158:	81 11       	cpse	r24, r1
		{
			num--;
 15a:	10 2f       	mov	r17, r16
		}
		
		if((dir& 0x1)==0 && num==11)//if counter increases and showed '9'    set 'num' to show '0'
 15c:	81 11       	cpse	r24, r1
 15e:	03 c0       	rjmp	.+6      	; 0x166 <main+0x9e>
 160:	1b 30       	cpi	r17, 0x0B	; 11
 162:	09 f4       	brne	.+2      	; 0x166 <main+0x9e>
		num=1;
 164:	11 e0       	ldi	r17, 0x01	; 1
		if((dir& 0x1)!=0 && num==0)//if counter decreases and showed '0'    set 'num' to show '9'
 166:	88 23       	and	r24, r24
 168:	b1 f2       	breq	.-84     	; 0x116 <main+0x4e>
 16a:	11 23       	and	r17, r17
 16c:	99 f2       	breq	.-90     	; 0x114 <main+0x4c>
 16e:	d3 cf       	rjmp	.-90     	; 0x116 <main+0x4e>

Disassembly of section .text.__dummy_fini:

000001bc <_fini>:
 1bc:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001be <__funcs_on_exit>:
 1be:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001c0 <__simulator_exit>:
 1c0:	08 95       	ret

Disassembly of section .text.exit:

00000192 <exit>:
 192:	ec 01       	movw	r28, r24
 194:	0e 94 df 00 	call	0x1be	; 0x1be <__funcs_on_exit>
 198:	0e 94 de 00 	call	0x1bc	; 0x1bc <_fini>
 19c:	ce 01       	movw	r24, r28
 19e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <__simulator_exit>
 1a2:	ce 01       	movw	r24, r28
 1a4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Exit>

Disassembly of section .text._Exit:

000001b8 <_Exit>:
 1b8:	0e 94 62 00 	call	0xc4	; 0xc4 <_exit>
