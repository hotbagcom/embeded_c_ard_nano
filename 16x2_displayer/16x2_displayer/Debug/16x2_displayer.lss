
16x2_displayer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000346  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000375  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000383  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001160  00000000  00000000  0000042b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000822  00000000  00000000  0000158b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000560  00000000  00000000  00001dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002310  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000239  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000560  00000000  00000000  000026b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000002a4  000002a4  00000338  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.toggle_e 00000010  00000284  00000284  00000318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_write 0000004a  00000106  00000106  0000019a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_read 0000004a  00000150  00000150  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_waitbusy 0000001a  0000022c  0000022c  000002c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_command 00000014  0000025c  0000025c  000002f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_gotoxy 00000014  00000270  00000270  00000304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_clrscr 00000008  00000294  00000294  00000328  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lcd_home 00000008  0000029c  0000029c  00000330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.lcd_putc 0000002a  00000202  00000202  00000296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.lcd_puts 00000034  0000019a  0000019a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.lcd_init 00000078  0000008e  0000008e  00000122  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .progmemx.data 0000000d  00000080  00000080  00000114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 26 .text.main    00000034  000001ce  000001ce  00000262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_fini 00000002  000002ac  000002ac  00000340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_funcs_on_exit 00000002  000002ae  000002ae  00000342  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_simulator_exit 00000002  000002b0  000002b0  00000344  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.exit    00000016  00000246  00000246  000002da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text._Exit   00000004  000002a8  000002a8  0000033c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
   8:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
   c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  10:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  14:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  18:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  1c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  20:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  24:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  28:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  2c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  30:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  34:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  38:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  3c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  40:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  44:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  48:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  4c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  50:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  54:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  58:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  5c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  60:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>
  64:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  78:	0c 94 23 01 	jmp	0x246	; 0x246 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000002a4 <__bad_interrupt>:
 2a4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.toggle_e:

00000284 <toggle_e>:
/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
}
 284:	8b b1       	in	r24, 0x0b	; 11
 286:	80 64       	ori	r24, 0x40	; 64
 288:	8b b9       	out	0x0b, r24	; 11
 28a:	00 c0       	rjmp	.+0      	; 0x28c <toggle_e+0x8>
 28c:	8b b1       	in	r24, 0x0b	; 11
 28e:	8f 7b       	andi	r24, 0xBF	; 191
 290:	8b b9       	out	0x0b, r24	; 11
 292:	08 95       	ret

Disassembly of section .text.lcd_write:

00000106 <lcd_write>:
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	d8 2f       	mov	r29, r24
 10c:	66 23       	and	r22, r22
 10e:	21 f0       	breq	.+8      	; 0x118 <lcd_write+0x12>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 61       	ori	r24, 0x10	; 16
 114:	8b b9       	out	0x0b, r24	; 11
 116:	03 c0       	rjmp	.+6      	; 0x11e <lcd_write+0x18>
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	8f 7e       	andi	r24, 0xEF	; 239
 11c:	8b b9       	out	0x0b, r24	; 11
 11e:	8b b1       	in	r24, 0x0b	; 11
 120:	8f 7d       	andi	r24, 0xDF	; 223
 122:	8b b9       	out	0x0b, r24	; 11
 124:	8a b1       	in	r24, 0x0a	; 10
 126:	8f 60       	ori	r24, 0x0F	; 15
 128:	8a b9       	out	0x0a, r24	; 10
 12a:	cb b1       	in	r28, 0x0b	; 11
 12c:	c0 7f       	andi	r28, 0xF0	; 240
 12e:	8d 2f       	mov	r24, r29
 130:	82 95       	swap	r24
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	8c 2b       	or	r24, r28
 136:	8b b9       	out	0x0b, r24	; 11
 138:	0e 94 42 01 	call	0x284	; 0x284 <toggle_e>
 13c:	df 70       	andi	r29, 0x0F	; 15
 13e:	dc 2b       	or	r29, r28
 140:	db b9       	out	0x0b, r29	; 11
 142:	0e 94 42 01 	call	0x284	; 0x284 <toggle_e>
 146:	cf 60       	ori	r28, 0x0F	; 15
 148:	cb b9       	out	0x0b, r28	; 11
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

Disassembly of section .text.lcd_read:

00000150 <lcd_read>:
 150:	88 23       	and	r24, r24
 152:	21 f0       	breq	.+8      	; 0x15c <lcd_read+0xc>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 61       	ori	r24, 0x10	; 16
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	03 c0       	rjmp	.+6      	; 0x162 <lcd_read+0x12>
 15c:	8b b1       	in	r24, 0x0b	; 11
 15e:	8f 7e       	andi	r24, 0xEF	; 239
 160:	8b b9       	out	0x0b, r24	; 11
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	80 62       	ori	r24, 0x20	; 32
 166:	8b b9       	out	0x0b, r24	; 11
 168:	8a b1       	in	r24, 0x0a	; 10
 16a:	80 7f       	andi	r24, 0xF0	; 240
 16c:	8a b9       	out	0x0a, r24	; 10
 16e:	8b b1       	in	r24, 0x0b	; 11
 170:	80 64       	ori	r24, 0x40	; 64
 172:	8b b9       	out	0x0b, r24	; 11
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_read+0x26>
 176:	99 b1       	in	r25, 0x09	; 9
 178:	92 95       	swap	r25
 17a:	90 7f       	andi	r25, 0xF0	; 240
 17c:	8b b1       	in	r24, 0x0b	; 11
 17e:	8f 7b       	andi	r24, 0xBF	; 191
 180:	8b b9       	out	0x0b, r24	; 11
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_read+0x34>
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 64       	ori	r24, 0x40	; 64
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_read+0x3c>
 18c:	89 b1       	in	r24, 0x09	; 9
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	2b b1       	in	r18, 0x0b	; 11
 192:	2f 7b       	andi	r18, 0xBF	; 191
 194:	2b b9       	out	0x0b, r18	; 11
 196:	89 2b       	or	r24, r25
 198:	08 95       	ret

Disassembly of section .text.lcd_waitbusy:

0000022c <lcd_waitbusy>:
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_read>
 232:	88 23       	and	r24, r24
 234:	dc f3       	brlt	.-10     	; 0x22c <lcd_waitbusy>
 236:	88 e0       	ldi	r24, 0x08	; 8
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <lcd_waitbusy+0xe>
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_read>
 244:	08 95       	ret

Disassembly of section .text.lcd_command:

0000025c <lcd_command>:
 25c:	cf 93       	push	r28
 25e:	c8 2f       	mov	r28, r24
 260:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_waitbusy>
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	8c 2f       	mov	r24, r28
 268:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

Disassembly of section .text.lcd_gotoxy:

00000270 <lcd_gotoxy>:
 270:	61 11       	cpse	r22, r1
 272:	04 c0       	rjmp	.+8      	; 0x27c <lcd_gotoxy+0xc>
 274:	80 58       	subi	r24, 0x80	; 128
 276:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_command>
 27a:	08 95       	ret
 27c:	80 54       	subi	r24, 0x40	; 64
 27e:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_command>
 282:	08 95       	ret

Disassembly of section .text.lcd_clrscr:

00000294 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_command>
 29a:	08 95       	ret

Disassembly of section .text.lcd_home:

0000029c <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_command>
 2a2:	08 95       	ret

Disassembly of section .text.lcd_putc:

00000202 <lcd_putc>:
/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
}
 202:	cf 93       	push	r28
 204:	c8 2f       	mov	r28, r24
 206:	0e 94 16 01 	call	0x22c	; 0x22c <lcd_waitbusy>
 20a:	ca 30       	cpi	r28, 0x0A	; 10
 20c:	49 f4       	brne	.+18     	; 0x220 <lcd_putc+0x1e>
 20e:	80 34       	cpi	r24, 0x40	; 64
 210:	10 f4       	brcc	.+4      	; 0x216 <lcd_putc+0x14>
 212:	80 e4       	ldi	r24, 0x40	; 64
 214:	01 c0       	rjmp	.+2      	; 0x218 <lcd_putc+0x16>
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	80 58       	subi	r24, 0x80	; 128
 21a:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_command>
 21e:	04 c0       	rjmp	.+8      	; 0x228 <lcd_putc+0x26>
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	8c 2f       	mov	r24, r28
 224:	0e 94 83 00 	call	0x106	; 0x106 <lcd_write>
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

Disassembly of section .text.lcd_puts:

0000019a <lcd_puts>:
 19a:	cf 92       	push	r12
 19c:	df 92       	push	r13
 19e:	ef 92       	push	r14
 1a0:	a8 2f       	mov	r26, r24
 1a2:	cb 01       	movw	r24, r22
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <lcd_puts+0x14>
 1a6:	0e 94 01 01 	call	0x202	; 0x202 <lcd_putc>
 1aa:	ae 2d       	mov	r26, r14
 1ac:	c6 01       	movw	r24, r12
 1ae:	6c 01       	movw	r12, r24
 1b0:	ea 2e       	mov	r14, r26
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	c2 1a       	sub	r12, r18
 1b6:	d2 0a       	sbc	r13, r18
 1b8:	e2 0a       	sbc	r14, r18
 1ba:	fc 01       	movw	r30, r24
 1bc:	84 91       	lpm	r24, Z
 1be:	a7 fd       	sbrc	r26, 7
 1c0:	80 81       	ld	r24, Z
 1c2:	81 11       	cpse	r24, r1
 1c4:	f0 cf       	rjmp	.-32     	; 0x1a6 <lcd_puts+0xc>
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	08 95       	ret

Disassembly of section .text.lcd_init:

0000008e <lcd_init>:
  8e:	1f 93       	push	r17
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	18 2f       	mov	r17, r24
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8f 67       	ori	r24, 0x7F	; 127
  9a:	8a b9       	out	0x0a, r24	; 10
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	9a ef       	ldi	r25, 0xFA	; 250
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_init+0x12>
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	8b b9       	out	0x0b, r24	; 11
  aa:	8b b1       	in	r24, 0x0b	; 11
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	8b b9       	out	0x0b, r24	; 11
  b0:	0e 94 42 01 	call	0x284	; 0x284 <toggle_e>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	9e e4       	ldi	r25, 0x4E	; 78
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <lcd_init+0x2a>
  bc:	0e 94 42 01 	call	0x284	; 0x284 <toggle_e>
  c0:	c0 e0       	ldi	r28, 0x00	; 0
  c2:	d1 e0       	ldi	r29, 0x01	; 1
  c4:	ce 01       	movw	r24, r28
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <lcd_init+0x38>
  ca:	0e 94 42 01 	call	0x284	; 0x284 <toggle_e>
  ce:	ce 01       	movw	r24, r28
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_init+0x42>
  d4:	8b b1       	in	r24, 0x0b	; 11
  d6:	8e 7f       	andi	r24, 0xFE	; 254
  d8:	8b b9       	out	0x0b, r24	; 11
  da:	0e 94 42 01 	call	0x284	; 0x284 <toggle_e>
  de:	21 97       	sbiw	r28, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_init+0x50>
  e2:	88 e2       	ldi	r24, 0x28	; 40
  e4:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_command>
  e8:	88 e0       	ldi	r24, 0x08	; 8
  ea:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_command>
  ee:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_clrscr>
  f2:	86 e0       	ldi	r24, 0x06	; 6
  f4:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_command>
  f8:	81 2f       	mov	r24, r17
  fa:	0e 94 2e 01 	call	0x25c	; 0x25c <lcd_command>
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	08 95       	ret

Disassembly of section .text.main:

000001ce <main>:
#include <xc.h>
#include "lcd16x2/lcd.h"

int main(void)
{
	DDRD = 0XF0;
 1ce:	80 ef       	ldi	r24, 0xF0	; 240
 1d0:	8a b9       	out	0x0a, r24	; 10
	lcd_init(LCD_DISP_ON_CURSOR);
 1d2:	8e e0       	ldi	r24, 0x0E	; 14
 1d4:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_init>
	lcd_clrscr();
 1d8:	0e 94 4a 01 	call	0x294	; 0x294 <lcd_clrscr>
	lcd_home();
 1dc:	0e 94 4e 01 	call	0x29c	; 0x29c <lcd_home>
	lcd_puts("Welcome");
 1e0:	60 e8       	ldi	r22, 0x80	; 128
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
	lcd_gotoxy(0,1);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	0e 94 38 01 	call	0x270	; 0x270 <lcd_gotoxy>
	lcd_puts("Home");
 1f2:	68 e8       	ldi	r22, 0x88	; 136
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 cd 00 	call	0x19a	; 0x19a <lcd_puts>
	
 
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000002ac <_fini>:
 2ac:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000002ae <__funcs_on_exit>:
 2ae:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000002b0 <__simulator_exit>:
 2b0:	08 95       	ret

Disassembly of section .text.exit:

00000246 <exit>:
 246:	ec 01       	movw	r28, r24
 248:	0e 94 57 01 	call	0x2ae	; 0x2ae <__funcs_on_exit>
 24c:	0e 94 56 01 	call	0x2ac	; 0x2ac <_fini>
 250:	ce 01       	movw	r24, r28
 252:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__simulator_exit>
 256:	ce 01       	movw	r24, r28
 258:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Exit>

Disassembly of section .text._Exit:

000002a8 <_Exit>:
 2a8:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
