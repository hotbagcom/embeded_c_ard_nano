
Drive_a_motor_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000360  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000003d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a7c  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000752  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fa  00000000  00000000  000016d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00001bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000485  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c4  00000000  00000000  00002251  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00002715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  88:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
#include "config.h"
#include "PWM_.h"

static ui32 periode = 0;
static ui8 position = 0; //0-256
ISR(INT0_vect){//activate falling edge of input signal (when you release push button)
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
	periode=getTCNT1();
  b2:	0e 94 85 01 	call	0x30a	; 0x30a <getTCNT1>
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  be:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  c2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  c6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
	
}
  ca:	ff 91       	pop	r31
  cc:	ef 91       	pop	r30
  ce:	bf 91       	pop	r27
  d0:	af 91       	pop	r26
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	7f 91       	pop	r23
  d8:	6f 91       	pop	r22
  da:	5f 91       	pop	r21
  dc:	4f 91       	pop	r20
  de:	3f 91       	pop	r19
  e0:	2f 91       	pop	r18
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <__vector_2>:
ISR(INT1_vect){//activate any logic chance of input signal
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	5f 93       	push	r21
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	position = periode - getTCNT1();
 10e:	0e 94 85 01 	call	0x30a	; 0x30a <getTCNT1>
}
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	7f 91       	pop	r23
 120:	6f 91       	pop	r22
 122:	5f 91       	pop	r21
 124:	4f 91       	pop	r20
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <main>:

int main(void)
{
	
    //use the PWM_ functions
	pwmdef_freq(0,25000);
 134:	68 ea       	ldi	r22, 0xA8	; 168
 136:	71 e6       	ldi	r23, 0x61	; 97
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 af 00 	call	0x15e	; 0x15e <pwmdef_freq>
	pwmdef_pin(5);
 13e:	85 e0       	ldi	r24, 0x05	; 5
 140:	0e 94 49 01 	call	0x292	; 0x292 <pwmdef_pin>
	
	//pd2/pd3 //extrnal interrupt
	DDRD |= 0b11<<2;
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	8c 60       	ori	r24, 0x0C	; 12
 148:	8a b9       	out	0x0a, r24	; 10
	EICRA = 0x06;//0b0000 0110
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	//masks ISC11 and ISC10  ISC01 and ISC00 .
	//ISC1x is logic change interrupt
	//ISC0x is falling edge interrupt
	//0b (INT1)01[any logical change] (INT0)10[_falling]
		
	EIMSK = 0x03; // enable int1 and int0
 150:	83 e0       	ldi	r24, 0x03	; 3
 152:	8d bb       	out	0x1d, r24	; 29
	//Enable interrupt mask register
		
	sei();
 154:	78 94       	sei
		
	
	
	setOCR0B(20);
 156:	84 e1       	ldi	r24, 0x14	; 20
 158:	0e 94 82 01 	call	0x304	; 0x304 <setOCR0B>
 15c:	ff cf       	rjmp	.-2      	; 0x15c <main+0x28>

0000015e <pwmdef_freq>:
}
void setOCR1A(ui16 ocr1a){
	OCR1A = ocr1a-1;
}
void setOCR1B(ui16 ocr1b){
	OCR1B = ocr1b-1;
 15e:	cf 92       	push	r12
 160:	df 92       	push	r13
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	18 2f       	mov	r17, r24
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	81 27       	eor	r24, r17
 174:	48 2f       	mov	r20, r24
 176:	41 70       	andi	r20, 0x01	; 1
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	c2 e0       	ldi	r28, 0x02	; 2
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	c4 1b       	sub	r28, r20
 180:	d5 0b       	sbc	r29, r21
 182:	6b 01       	movw	r12, r22
 184:	e1 2c       	mov	r14, r1
 186:	f1 2c       	mov	r15, r1
 188:	9e 01       	movw	r18, r28
 18a:	32 2f       	mov	r19, r18
 18c:	22 27       	eor	r18, r18
 18e:	33 0f       	add	r19, r19
 190:	33 0f       	add	r19, r19
 192:	33 0f       	add	r19, r19
 194:	03 2e       	mov	r0, r19
 196:	00 0c       	add	r0, r0
 198:	44 0b       	sbc	r20, r20
 19a:	55 0b       	sbc	r21, r21
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	74 e2       	ldi	r23, 0x24	; 36
 1a0:	84 ef       	ldi	r24, 0xF4	; 244
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 8c 01 	call	0x318	; 0x318 <__udivmodsi4>
 1a8:	c2 16       	cp	r12, r18
 1aa:	d3 06       	cpc	r13, r19
 1ac:	e4 06       	cpc	r14, r20
 1ae:	f5 06       	cpc	r15, r21
 1b0:	10 f4       	brcc	.+4      	; 0x1b6 <pwmdef_freq+0x58>
 1b2:	08 e0       	ldi	r16, 0x08	; 8
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <pwmdef_freq+0x5a>
 1b6:	0a e0       	ldi	r16, 0x0A	; 10
 1b8:	9e 01       	movw	r18, r28
 1ba:	32 2f       	mov	r19, r18
 1bc:	22 27       	eor	r18, r18
 1be:	33 0f       	add	r19, r19
 1c0:	03 2e       	mov	r0, r19
 1c2:	00 0c       	add	r0, r0
 1c4:	44 0b       	sbc	r20, r20
 1c6:	55 0b       	sbc	r21, r21
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	74 e2       	ldi	r23, 0x24	; 36
 1cc:	84 ef       	ldi	r24, 0xF4	; 244
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 8c 01 	call	0x318	; 0x318 <__udivmodsi4>
 1d4:	c2 16       	cp	r12, r18
 1d6:	d3 06       	cpc	r13, r19
 1d8:	e4 06       	cpc	r14, r20
 1da:	f5 06       	cpc	r15, r21
 1dc:	08 f4       	brcc	.+2      	; 0x1e0 <pwmdef_freq+0x82>
 1de:	06 e0       	ldi	r16, 0x06	; 6
 1e0:	9e 01       	movw	r18, r28
 1e2:	00 24       	eor	r0, r0
 1e4:	36 95       	lsr	r19
 1e6:	27 95       	ror	r18
 1e8:	07 94       	ror	r0
 1ea:	36 95       	lsr	r19
 1ec:	27 95       	ror	r18
 1ee:	07 94       	ror	r0
 1f0:	32 2f       	mov	r19, r18
 1f2:	20 2d       	mov	r18, r0
 1f4:	03 2e       	mov	r0, r19
 1f6:	00 0c       	add	r0, r0
 1f8:	44 0b       	sbc	r20, r20
 1fa:	55 0b       	sbc	r21, r21
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	74 e2       	ldi	r23, 0x24	; 36
 200:	84 ef       	ldi	r24, 0xF4	; 244
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 8c 01 	call	0x318	; 0x318 <__udivmodsi4>
 208:	c2 16       	cp	r12, r18
 20a:	d3 06       	cpc	r13, r19
 20c:	e4 06       	cpc	r14, r20
 20e:	f5 06       	cpc	r15, r21
 210:	08 f4       	brcc	.+2      	; 0x214 <pwmdef_freq+0xb6>
 212:	02 e0       	ldi	r16, 0x02	; 2
 214:	9e 01       	movw	r18, r28
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	03 2e       	mov	r0, r19
 224:	00 0c       	add	r0, r0
 226:	44 0b       	sbc	r20, r20
 228:	55 0b       	sbc	r21, r21
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	74 e2       	ldi	r23, 0x24	; 36
 22e:	84 ef       	ldi	r24, 0xF4	; 244
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 8c 01 	call	0x318	; 0x318 <__udivmodsi4>
 236:	c2 16       	cp	r12, r18
 238:	d3 06       	cpc	r13, r19
 23a:	e4 06       	cpc	r14, r20
 23c:	f5 06       	cpc	r15, r21
 23e:	08 f4       	brcc	.+2      	; 0x242 <pwmdef_freq+0xe4>
 240:	01 e0       	ldi	r16, 0x01	; 1
 242:	11 11       	cpse	r17, r1
 244:	07 c0       	rjmp	.+14     	; 0x254 <pwmdef_freq+0xf6>
 246:	83 ea       	ldi	r24, 0xA3	; 163
 248:	84 bd       	out	0x24, r24	; 36
 24a:	85 b5       	in	r24, 0x25	; 37
 24c:	80 7f       	andi	r24, 0xF0	; 240
 24e:	08 2b       	or	r16, r24
 250:	05 bd       	out	0x25, r16	; 37
 252:	14 c0       	rjmp	.+40     	; 0x27c <pwmdef_freq+0x11e>
 254:	11 30       	cpi	r17, 0x01	; 1
 256:	49 f4       	brne	.+18     	; 0x26a <pwmdef_freq+0x10c>
 258:	82 ea       	ldi	r24, 0xA2	; 162
 25a:	84 bd       	out	0x24, r24	; 36
 25c:	e1 e8       	ldi	r30, 0x81	; 129
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	80 7f       	andi	r24, 0xF0	; 240
 264:	08 2b       	or	r16, r24
 266:	00 83       	st	Z, r16
 268:	09 c0       	rjmp	.+18     	; 0x27c <pwmdef_freq+0x11e>
 26a:	83 ea       	ldi	r24, 0xA3	; 163
 26c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 270:	e1 eb       	ldi	r30, 0xB1	; 177
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	08 2b       	or	r16, r24
 27a:	00 83       	st	Z, r16
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	ef 90       	pop	r14
 28c:	df 90       	pop	r13
 28e:	cf 90       	pop	r12
 290:	08 95       	ret

00000292 <pwmdef_pin>:
 292:	86 30       	cpi	r24, 0x06	; 6
 294:	69 f0       	breq	.+26     	; 0x2b0 <pwmdef_pin+0x1e>
 296:	28 f4       	brcc	.+10     	; 0x2a2 <pwmdef_pin+0x10>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	69 f1       	breq	.+90     	; 0x2f6 <pwmdef_pin+0x64>
 29c:	85 30       	cpi	r24, 0x05	; 5
 29e:	79 f0       	breq	.+30     	; 0x2be <pwmdef_pin+0x2c>
 2a0:	08 95       	ret
 2a2:	8a 30       	cpi	r24, 0x0A	; 10
 2a4:	d1 f0       	breq	.+52     	; 0x2da <pwmdef_pin+0x48>
 2a6:	8b 30       	cpi	r24, 0x0B	; 11
 2a8:	f9 f0       	breq	.+62     	; 0x2e8 <pwmdef_pin+0x56>
 2aa:	89 30       	cpi	r24, 0x09	; 9
 2ac:	51 f5       	brne	.+84     	; 0x302 <pwmdef_pin+0x70>
 2ae:	0e c0       	rjmp	.+28     	; 0x2cc <pwmdef_pin+0x3a>
 2b0:	56 9a       	sbi	0x0a, 6	; 10
 2b2:	ee e6       	ldi	r30, 0x6E	; 110
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	82 60       	ori	r24, 0x02	; 2
 2ba:	80 83       	st	Z, r24
 2bc:	08 95       	ret
 2be:	55 9a       	sbi	0x0a, 5	; 10
 2c0:	ee e6       	ldi	r30, 0x6E	; 110
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	84 60       	ori	r24, 0x04	; 4
 2c8:	80 83       	st	Z, r24
 2ca:	08 95       	ret
 2cc:	21 9a       	sbi	0x04, 1	; 4
 2ce:	ef e6       	ldi	r30, 0x6F	; 111
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	80 83       	st	Z, r24
 2d8:	08 95       	ret
 2da:	22 9a       	sbi	0x04, 2	; 4
 2dc:	ef e6       	ldi	r30, 0x6F	; 111
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	84 60       	ori	r24, 0x04	; 4
 2e4:	80 83       	st	Z, r24
 2e6:	08 95       	ret
 2e8:	23 9a       	sbi	0x04, 3	; 4
 2ea:	e0 e7       	ldi	r30, 0x70	; 112
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	80 83       	st	Z, r24
 2f4:	08 95       	ret
 2f6:	53 9a       	sbi	0x0a, 3	; 10
 2f8:	e0 e7       	ldi	r30, 0x70	; 112
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	84 60       	ori	r24, 0x04	; 4
 300:	80 83       	st	Z, r24
 302:	08 95       	ret

00000304 <setOCR0B>:
 304:	81 50       	subi	r24, 0x01	; 1
 306:	88 bd       	out	0x28, r24	; 40
 308:	08 95       	ret

0000030a <getTCNT1>:
}
ui16 getTCNT1(void){
	return (TCNT1L)|(TCNT1H <<8);
 30a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 30e:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 312:	90 e0       	ldi	r25, 0x00	; 0
}
 314:	92 2b       	or	r25, r18
 316:	08 95       	ret

00000318 <__udivmodsi4>:
 318:	a1 e2       	ldi	r26, 0x21	; 33
 31a:	1a 2e       	mov	r1, r26
 31c:	aa 1b       	sub	r26, r26
 31e:	bb 1b       	sub	r27, r27
 320:	fd 01       	movw	r30, r26
 322:	0d c0       	rjmp	.+26     	; 0x33e <__udivmodsi4_ep>

00000324 <__udivmodsi4_loop>:
 324:	aa 1f       	adc	r26, r26
 326:	bb 1f       	adc	r27, r27
 328:	ee 1f       	adc	r30, r30
 32a:	ff 1f       	adc	r31, r31
 32c:	a2 17       	cp	r26, r18
 32e:	b3 07       	cpc	r27, r19
 330:	e4 07       	cpc	r30, r20
 332:	f5 07       	cpc	r31, r21
 334:	20 f0       	brcs	.+8      	; 0x33e <__udivmodsi4_ep>
 336:	a2 1b       	sub	r26, r18
 338:	b3 0b       	sbc	r27, r19
 33a:	e4 0b       	sbc	r30, r20
 33c:	f5 0b       	sbc	r31, r21

0000033e <__udivmodsi4_ep>:
 33e:	66 1f       	adc	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	88 1f       	adc	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	1a 94       	dec	r1
 348:	69 f7       	brne	.-38     	; 0x324 <__udivmodsi4_loop>
 34a:	60 95       	com	r22
 34c:	70 95       	com	r23
 34e:	80 95       	com	r24
 350:	90 95       	com	r25
 352:	9b 01       	movw	r18, r22
 354:	ac 01       	movw	r20, r24
 356:	bd 01       	movw	r22, r26
 358:	cf 01       	movw	r24, r30
 35a:	08 95       	ret

0000035c <_exit>:
 35c:	f8 94       	cli

0000035e <__stop_program>:
 35e:	ff cf       	rjmp	.-2      	; 0x35e <__stop_program>
